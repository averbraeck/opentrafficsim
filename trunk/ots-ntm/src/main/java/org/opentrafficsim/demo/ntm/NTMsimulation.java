package org.opentrafficsim.demo.ntm;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Set;

import org.jgrapht.graph.SimpleDirectedWeightedGraph;
import org.opentrafficsim.core.network.LinkEdge;
import org.opentrafficsim.core.unit.FrequencyUnit;
import org.opentrafficsim.core.unit.LengthUnit;
import org.opentrafficsim.core.unit.TimeUnit;
import org.opentrafficsim.core.value.vdouble.scalar.DoubleScalar;
import org.opentrafficsim.core.value.vdouble.scalar.DoubleScalar.Abs;
import org.opentrafficsim.demo.ntm.Node.TrafficBehaviourType;
import org.opentrafficsim.demo.ntm.trafficdemand.FractionOfTripDemandByTimeSegment;
import org.opentrafficsim.demo.ntm.trafficdemand.TripDemand;
import org.opentrafficsim.demo.ntm.trafficdemand.TripInfoTimeDynamic;

/**
 * <p>
 * Copyright (c) 2013-2014 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights
 * reserved. <br>
 * BSD-style license. See <a href="http://opentrafficsim.org/node/13">OpenTrafficSim License</a>.
 * <p>
 * @version 29 Oct 2014 <br>
 * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>
 * @author <a href="http://Hansvanlint.weblog.tudelft.nl">Hans van Lint</a>
 * @author <a href="http://www.tudelft.nl/pknoppers">Peter Knoppers</a>
 * @author <a href="http://www.citg.tudelft.nl">Guus Tamminga</a>
 * @author <a href="http://www.citg.tudelft.nl">Yufei Yuan</a>
 */
public class NTMsimulation
{
    // variables for data output during the simulation
    /** */
    static int steps = 0;

    /** for reporting */
    static int MAXSTEPS = 150;

    /** */
    static HashMap<Node, HashMap<Node, Double[]>> fluxAreaToNeighbours = new HashMap<>();

    /**
     * @param model
     * @throws IOException
     */
    public static void simulate(final NTMModel model) throws IOException
    {
        @SuppressWarnings("unchecked")
        DoubleScalar.Abs<TimeUnit> currentTime = null;
        // debug for fastest path and write data??
        steps++;
        try
        {
            currentTime =
                    new DoubleScalar.Abs<TimeUnit>(model.getSettingsNTM().getStartTimeSinceMidnight().getSI()
                            + model.getSimulator().getSimulatorTime().get().getSI(), TimeUnit.SECOND);
        }
        catch (RemoteException exception2)
        {
            exception2.printStackTrace();
        }

        // retrieve information from the Area Graph containing the NTM areas and the selected highways

        // The AreaGraph contains EDGES with differing characteristics:
        // - "NTM"-links between NTM areas
        // - "Cordon" links at the border of the study area that act as feeders and sinks of traffic to the "real" Areas
        // - "Flow" links representing higher order roads with behaviour that deviates from the NTM area links
        // (only for specific "main" roads)

        // The VERTICES (type: BoundedNode) represent the NTM areas, or the entrance / exit of a Flow link.
        // NTM nodes and FlowLink entrances/exits are connected by a "Transfer" link
        //
        // The "NTM" links between a pair of nodes, visualise the connection of that node to its "neighbours" with NTM
        // characteristics
        // The "Flow" links represent a connection where traffic behaves differently than in the NTM areas:
        // once traffic is on a homogeneous link, the capacity remains stable
        //
        // The simulation of Traffic becomes a nested process:
        // - the NTM process is the parent of the simulation
        // - the Flow process acts as a "child" process
        // ********************************************************************************************************
        // STEP 1 of the simulation describes the initialisation of Demand from the Traffic Demand file:
        // - this is generated by the OD matrix from the model

        // first loop through the network nodes and select the NTM and Cordon "Area nodes"
        // These nodes generate traffic from the trip demand file (feeders)

        // There are two ESSENTIAL variables / class types:
        // - the Node.ClassBehaviour represents the aggregated traffic flow dynamics between nodes/cells
        // - the TripInfoTimeDynamic of an Area, showing for every OD-pair:
        // . - number of trips between origin (or intermediate areas on a path from O to D) - destination pairs (from
        // . . demand file)
        // . - neighbour area on path form Origin to Destination
        // . - time profile curve of trip departures from this origin (only used for the real origins!)
        // . - accumulated cars in this area/node/cell, heading on the way to a certain destination
        // . - flow in this time-step to neighbour from this area to destination

        if (model.getSettingsNTM().isReRoute())
        {
            if (model.getSettingsNTM().getTimeStepDurationNTM().getInUnit(TimeUnit.SECOND) * steps
                    % model.getSettingsNTM().getReRouteTimeInterval().getInUnit(TimeUnit.SECOND) == 0)
            {
                System.out.println("reroute");
                // new K-shortest paths creation
                Routes.createRoutes(model, model.getSettingsNTM().getNumberOfRoutes(), model.getSettingsNTM()
                        .getWeightNewRoutes(), false);
            }
        }

        if (steps == 28)
        {
            for (Node node : model.getAreaGraph().vertexSet())
            {
                if (node.getId().equals("C5"))
                {
                    BoundedNode bNode = (BoundedNode) node;
                    CellBehaviourNTM cellBehaviourNTM = (CellBehaviourNTM) bNode.getCellBehaviour();
                    Abs<FrequencyUnit> cap = new DoubleScalar.Abs<FrequencyUnit>(100.0, FrequencyUnit.PER_HOUR);
                    cellBehaviourNTM.setMaxCapacity(cap);
                }
            }
        }
        if (steps == 1)
        {
            for (Node node : model.getAreaGraph().vertexSet())
            {
                BoundedNode origin = (BoundedNode) node;
                // **** RELEVANT: set SUPPLY of all areas at maximum in first step
                if (origin.getBehaviourType() == TrafficBehaviourType.NTM)
                {
                    CellBehaviourNTM cellBehaviourNTM = (CellBehaviourNTM) origin.getCellBehaviour();
                    double tripByTimeStep =
                            model.getSettingsNTM().getTimeStepDurationNTM().getSI()
                                    * cellBehaviourNTM.getMaxCapacity().getSI();
                    cellBehaviourNTM.setSupply(tripByTimeStep);
                }
                else if (origin.getBehaviourType() == TrafficBehaviourType.CORDON)
                {
                    // Always infinite!
                    origin.getCellBehaviour().setSupply(java.lang.Double.POSITIVE_INFINITY);
                }
            }
        }

        // FIRST: Loop through all nodes and reset the relevant variables such as DemandToEnter (for nodes with more
        // than one entrance) to zero
        for (LinkEdge<Link> link : model.getAreaGraph().edgeSet())
        {
            {
                // only the feeding areas of the type NTM and Cordon can generate new traffic from the trip demand
                // matrix
                if (link.getLink().getBehaviourType() == TrafficBehaviourType.NTM
                        || link.getLink().getBehaviourType() == TrafficBehaviourType.CORDON)
                {
                    BoundedNode node = (BoundedNode) link.getLink().getStartNode();
                    BoundedNode nodeGraph = (BoundedNode) model.getNodeAreaGraphMap().get(node.getId());
                    nodeGraph.getCellBehaviour().setDemandToEnter(0);
                    nodeGraph.getCellBehaviour().setArrivals(0);
                    nodeGraph.getCellBehaviour().setDepartures(0);
                    // set all fluxes from node to neighbour by destination to zero
                    for (TripInfoByDestination tripInfoByDestination : nodeGraph.getCellBehaviour()
                            .getTripInfoByNodeMap().values())
                    {
                        tripInfoByDestination.setFluxToNeighbour(0);
                        tripInfoByDestination.setDepartedTrips(0);
                        tripInfoByDestination.setArrivedTrips(0);
                    }
                }
                else if (link.getLink().getBehaviourType() == TrafficBehaviourType.FLOW)
                {
                    LinkCellTransmission ctmLink = (LinkCellTransmission) link.getLink();
                    // set the demand of trips that want to enter the first cell to zero
                    // **** RELEVANT
                    ctmLink.getCells().get(0).getCellBehaviourFlow().setDemandToEnter(0);
                    for (FlowCell cell : ctmLink.getCells())
                    {
                        for (TripInfoByDestination tripInfoByDestination : cell.getCellBehaviourFlow()
                                .getTripInfoByNodeMap().values())
                        {
                            tripInfoByDestination.setFluxToNeighbour(0);
                        }
                    }
                }
            }
        }

        // Loop through all areas to detect the trips to the destination area
        for (Node node : model.getAreaGraph().vertexSet())
        {
            BoundedNode origin = (BoundedNode) node;
            try
            {
                // only the feeding areas of the type NTM and Cordon can generate new traffic from the trip demand
                // matrix
                if (origin.getBehaviourType() == TrafficBehaviourType.NTM
                        || origin.getBehaviourType() == TrafficBehaviourType.CORDON)
                {
                    // the variable CellBehaviour(NTM) defines the traffic process within an area (the area is
                    // represented by the "BoundedNode"). This can be NTM behaviour, Cell transmission or other.

                    // during the simulation traffic enters and leaves the NTM areas. The number of "accumulated cars"
                    // represents the net balance of cars within the Nodes/areas. The new demand will be added!
                    // The variable TripsFrom contains information on trips from an origin/node to ALL other
                    // destinations.
                    // This origin can be the real origin or an intermediate area on the path to destination
                    // (neighbours).
                    // The structure (or Class in Java) named TripInfoDynamic is stored in a HashMap (lookup array) that
                    // contains this information for all destinations separately.
                    Double maximumNumberOfTripsToAdd = Double.POSITIVE_INFINITY;
                    if (origin.getBehaviourType() == TrafficBehaviourType.NTM)
                    {
                        CellBehaviourNTM celBehaviourNTM = (CellBehaviourNTM) origin.getCellBehaviour();
                        int crit = celBehaviourNTM.getParametersNTM().getAccCritical().size();
                        double critDensityPerHour = celBehaviourNTM.getParametersNTM().getAccCritical().get(crit - 1);
                        double roadLength = origin.getArea().getRoadLength().getInUnit(LengthUnit.KILOMETER);
                        // double share =
                        // model.getSettingsNTM().getTimeStepDurationNTM().getInUnit(TimeUnit.SECOND) / 3600;
                        Double maxAccumulationThisArea = roadLength * critDensityPerHour;
                        maximumNumberOfTripsToAdd =
                                maxAccumulationThisArea - origin.getCellBehaviour().getAccumulatedCars();
                    }
                    Double totalTrips =
                            TripDemand.getTotalNumberOfTripsFromOrigin(model.tripDemandToUse, origin.getId(),
                                    currentTime, model.getSettingsNTM().getTimeStepDurationNTM());
                    Double shareToAdd = Math.min(1, maximumNumberOfTripsToAdd / totalTrips);
                    if (shareToAdd < 1)
                    {
                        System.out.println("full");
                    }
                    Map<String, TripInfoTimeDynamic> tripsFrom =
                            model.tripDemandToUse.getTripInfo().get(origin.getId());
                    // loop through all destinations to get total demand and supply per origin and add the new trips
                    for (TripInfoByDestination tripInfoByDestination : origin.getCellBehaviour().getTripInfoByNodeMap()
                            .values())
                    // only select the final destinations: where Trips are heading to
                    {
                        BoundedNode destinationNode = (BoundedNode) tripInfoByDestination.getDestination();
                        if (tripsFrom != null)
                        {
                            if (tripsFrom.get(destinationNode.getId()) != null)
                            {
                                if (tripsFrom.get(destinationNode.getId()).getNumberOfTrips() > 0)
                                {
                                    // get the share of Trips of this time slice (NTM simulation step of 10 seconds)
                                    // these new Trips are added to the TRIPS that are already on their way (passing an
                                    // NTM area): the AccumulatedCars specified by their specific destination

                                    // TODO if maxAccumulation, put TRIPS in a reservoir

                                    double startingTrips =
                                            shareToAdd
                                                    * TripDemand
                                                            .getTotalNumberOfTripsFromOriginToDestinationByTimeStep(
                                                                    model.tripDemandToUse, origin.getId(),
                                                                    destinationNode.getId(), currentTime, model
                                                                            .getSettingsNTM().getTimeStepDurationNTM());
                                    // **** RELEVANT
                                    tripInfoByDestination.addAccumulatedCarsToDestination(startingTrips);
                                    tripInfoByDestination.setAccumulatedCarsToDestinationAdded(startingTrips);
                                    tripInfoByDestination.addDepartedTrips(startingTrips);

                                    // increases the total number of accumulated cars in the area, that is
                                    // used for NTM computations
                                    // **** RELEVANT
                                    origin.getCellBehaviour().addAccumulatedCars(startingTrips);
                                    origin.getCellBehaviour().addDepartures(startingTrips);
                                }
                            }
                        }
                    }

                    // only production, if there are accumulated cars!!
                    if (origin.getCellBehaviour().getAccumulatedCars() > 0.0)
                    {

                        // The variable CellBehaviour stores the number of accumulated cars in this cell, and
                        // additionally
                        // the demandToEnter (cars that want to enter an area/cell)
                        // First update the accumulation of cars within the Area (we added the new Trips)
                        // ACCUMULATION
                        // the demand and supply of traffic is based on the type of Cell that is considered
                        // DEMAND_LEAVE && SUPPLY
                        if (origin.getBehaviourType() == TrafficBehaviourType.NTM)
                        {
                            // CellBehaviourNTM extends CellBehaviour (additional or different behaviour)
                            CellBehaviourNTM cellBehaviourNTM = (CellBehaviourNTM) origin.getCellBehaviour();
                            // compute the total Demand (production) from an Area to all other Destinations (the level
                            // is
                            // based on the accumulation, the capacity of an area and the NFD algorithm).
                            // The new demand of this area is derived via the method RetrieveDemand that is based on the
                            // network fundamental diagram (see there for further details)
                            // TODO implement roadLength and length simulation step !!!!!!!!!!!!!!!!!!!!!!!!

                            // **** RELEVANT: set DEMAND
                            Abs<FrequencyUnit> tripByHour =
                                    cellBehaviourNTM.retrieveDemand(origin.getCellBehaviour().getAccumulatedCars(),
                                            cellBehaviourNTM.getMaxCapacity(), cellBehaviourNTM.getParametersNTM());
                            double tripByTimeStep =
                                    model.getSettingsNTM().getTimeStepDurationNTM().getSI() * tripByHour.getSI();
                            cellBehaviourNTM.setDemand(tripByTimeStep);
                            // compute the total supply (maximum) from neighbours to this Area (again based on the
                            // accumulation and NFD/area characteristics)
                            // TODO implement roadLength and length simulation step !!!!!!!!!!!!!!!!!!!!!!!!

                            // **** RELEVANT: set SUPPLY
                            tripByHour =
                                    cellBehaviourNTM.retrieveSupply(origin.getCellBehaviour().getAccumulatedCars(),
                                            cellBehaviourNTM.getMaxCapacity(), cellBehaviourNTM.getParametersNTM());
                            tripByTimeStep =
                                    model.getSettingsNTM().getTimeStepDurationNTM().getSI() * tripByHour.getSI();
                            cellBehaviourNTM.setSupply(tripByTimeStep);
                        }

                        // the border, or CORDON areas, act as sink/source for traffic
                        // The flow nodes act as entrances, intermediate or exits of the cell transmission model
                        // For this last category, we assume that the links are putting a restriction on capacity
                        else if (origin.getBehaviourType() == TrafficBehaviourType.CORDON)
                        {
                            // demand is the sum of new demand and accumulated traffic from previous time steps
                            // (possibly if the neighbour area does not accept all traffic)
                            // Within cordon areas all traffic can directly move to another area or Node!

                            // **** RELEVANT
                            origin.getCellBehaviour().setDemand(origin.getCellBehaviour().getAccumulatedCars());
                            // the total supply is infinite for Cordon and Flow nodes (sinks with no limit on in-flow)
                            // TODO can go to the initiation of this cellBehaviour

                            // **** RELEVANT
                            origin.getCellBehaviour().setSupply(java.lang.Double.POSITIVE_INFINITY);
                        }
                        origin.getArea().setAccumulatedCars(origin.getCellBehaviour().getAccumulatedCars());
                    }
                    else
                    // supply needs to be set, else it may become too low!!!!
                    {
                        if (origin.getBehaviourType() == TrafficBehaviourType.NTM)
                        {
                            // CellBehaviourNTM extends CellBehaviour (additional or different behaviour)
                            CellBehaviourNTM cellBehaviourNTM = (CellBehaviourNTM) origin.getCellBehaviour();
                            Abs<FrequencyUnit> tripByHour =
                                    cellBehaviourNTM.retrieveSupply(origin.getCellBehaviour().getAccumulatedCars(),
                                            cellBehaviourNTM.getMaxCapacity(), cellBehaviourNTM.getParametersNTM());
                            double tripByTimeStep =
                                    model.getSettingsNTM().getTimeStepDurationNTM().getSI() * tripByHour.getSI();
                            cellBehaviourNTM.setSupply(tripByTimeStep);
                        }
                    }

                    // NEXT STEP!!!!
                    // First we measure the actual demand between areas
                    // If there are any capacity restrictions from area to area, this may become active!
                    if (origin.getBehaviourType() == TrafficBehaviourType.NTM)
                    {
                        CellBehaviourNTM cellBehaviour = (CellBehaviourNTM) origin.getCellBehaviour();
                        HashMap<BoundedNode, Abs<FrequencyUnit>> borderDemand =
                                new HashMap<BoundedNode, Abs<FrequencyUnit>>();
                        cellBehaviour.setBorderDemand(borderDemand);
                        for (TripInfoByDestination tripInfoByDestination : origin.getCellBehaviour()
                                .getTripInfoByNodeMap().values())
                        {
                            if (tripInfoByDestination.getAccumulatedCarsToDestination() > 0)
                            {
                                // Compute the share of the accumulated trips to a certain destination as part of the
                                // total accumulation
                                Set<BoundedNode> neighbours =
                                        tripInfoByDestination.getNeighbourAndRouteShare().keySet();
                                for (BoundedNode neighbour : neighbours)
                                {
                                    if (neighbour != null)
                                    {

                                        double demandToNeighbour =
                                                (tripInfoByDestination.getAccumulatedCarsToDestination()
                                                        * tripInfoByDestination.getNeighbourAndRouteShare().get(
                                                                neighbour) / origin.getCellBehaviour()
                                                        .getAccumulatedCars()) * origin.getCellBehaviour().getDemand();
                                        double demandToNeighbourPerHour =
                                                demandToNeighbour
                                                        * 3600
                                                        / model.getSettingsNTM().getTimeStepDurationNTM()
                                                                .getInUnit(TimeUnit.SECOND);
                                        Abs<FrequencyUnit> demand =
                                                new Abs<FrequencyUnit>(demandToNeighbourPerHour, FrequencyUnit.PER_HOUR);
                                        cellBehaviour.addBorderDemand(neighbour, demand);
                                    }
                                }
                            }
                        }
                    }

                    // NEXT STEP!!!!
                    // after determining new demand, we compute the demand for traffic to other nodes or areas by
                    // looping through all nodes on a path from every origin
                    for (TripInfoByDestination tripInfoByDestination : origin.getCellBehaviour().getTripInfoByNodeMap()
                            .values())
                    {
                        // The tripInfoByNode includes information about the trips, but specified by all destination
                        // zones
                        // In this step we are interested in the first zone we encounter ("neighbour") of the
                        // cars on their path to a certain destination Area.
                        // Therefore we retrieve this neighbour.
                        Set<BoundedNode> neighbours = tripInfoByDestination.getNeighbourAndRouteShare().keySet();
                        for (BoundedNode neighbour : neighbours)
                        {
                            // Compute the share of the accumulated trips to a certain destination as part of the
                            // total accumulation
                            if (neighbour != null)
                            {
                                if (tripInfoByDestination.getAccumulatedCarsToDestination() >= 0)
                                {
                                    // this potential out-flow is heading to the neighbour that is on its path to
                                    // destination

                                    // **** RELEVANT
                                    double demandToNeighbour = 0;
                                    if (tripInfoByDestination.getAccumulatedCarsToDestination() > 0)
                                    {
                                        demandToNeighbour =
                                                (tripInfoByDestination.getAccumulatedCarsToDestination()
                                                        * tripInfoByDestination.getNeighbourAndRouteShare().get(
                                                                neighbour) / origin.getCellBehaviour()
                                                        .getAccumulatedCars()) * origin.getCellBehaviour().getDemand();
                                        // in case of capacity restraints at border, the demand could be lower
                                        if (origin.getBehaviourType() == TrafficBehaviourType.NTM)
                                        {
                                            double ratioCapacityVersusDemand = 1.0;
                                            CellBehaviourNTM cellBehaviour =
                                                    (CellBehaviourNTM) origin.getCellBehaviour();
                                            if (cellBehaviour.getBorderDemand() != null)
                                            {
                                                if (cellBehaviour.getBorderDemand().get(neighbour) != null)
                                                {
                                                    if (cellBehaviour.getBorderDemand().get(neighbour).getSI() > 0)
                                                    {
                                                        ratioCapacityVersusDemand =
                                                                cellBehaviour.getBorderCapacity().get(neighbour)
                                                                        .getSI()
                                                                        / cellBehaviour.getBorderDemand()
                                                                                .get(neighbour).getSI();
                                                    }
                                                }
                                            }
                                            demandToNeighbour =
                                                    Math.min(ratioCapacityVersusDemand, 1) * demandToNeighbour;
                                        }

                                    }

                                    // **** RELEVANT
                                    tripInfoByDestination.setDemandToDestination(demandToNeighbour);
                                    // first add these trips to the number of trips that want to transfer to their
                                    // neighbour
                                    if (neighbour.getBehaviourType() == TrafficBehaviourType.NTM
                                            || neighbour.getBehaviourType() == TrafficBehaviourType.CORDON)
                                    {
                                        // this flow is also added to the total sum of traffic that wants to enter this
                                        // neighbour Area.

                                        // **** RELEVANT
                                        neighbour.getCellBehaviour().addDemandToEnter(demandToNeighbour);
                                    }
                                    // the trips that enter the flow Links, are processed immediately (no timestep
                                    // delay) to the first cell of the succeeding transmission link
                                    else if (neighbour.getBehaviourType() == TrafficBehaviourType.FLOW)
                                    {
                                        Set<BoundedNode> nextNeighbours =
                                                neighbour.getCellBehaviour().getTripInfoByNodeMap()
                                                        .get(tripInfoByDestination.getDestination())
                                                        .getNeighbourAndRouteShare().keySet();
                                        for (BoundedNode nextNeighbour : nextNeighbours)
                                        {
                                            // when entering a flow link, loop through all succeeding flow links until
                                            // reaching
                                            // a NTM or CORODN node :
                                            if (nextNeighbour.getBehaviourType() == TrafficBehaviourType.FLOW)
                                            {
                                                // Retrieve the cell transmission link
                                                // all cells (should) have identical characteristics
                                                LinkCellTransmission ctmLink =
                                                        (LinkCellTransmission) model.getAreaGraph()
                                                                .getEdge(neighbour, nextNeighbour).getLink();
                                                // add the demand of trips that want to enter the first cell

                                                // **** RELEVANT
                                                ctmLink.getCells().get(0).getCellBehaviourFlow()
                                                        .addDemandToEnter(demandToNeighbour);
                                            }
                                            else if (neighbour.getBehaviourType() == TrafficBehaviourType.NTM
                                                    || neighbour.getBehaviourType() == TrafficBehaviourType.CORDON)
                                            {
                                                nextNeighbour.getCellBehaviour().addDemandToEnter(demandToNeighbour);
                                            }
                                        }
                                    }
                                    else if (neighbour.getBehaviourType() == TrafficBehaviourType.ROAD)
                                    {
                                        System.out.println("NTMSimulation line 349: Type road should not be possible");
                                    }

                                }
                            }

                            else
                            {
                                System.out.println("NTMSimulation line 379: Strange: no neighbour");
                            }
                        }
                        // In the next step, see whether this demand from nodes is able to enter completely or
                        // just partly (when supply is restricted)

                    }

                }

                else if (origin.getBehaviourType() == TrafficBehaviourType.FLOW)
                {
                    // Update demand and supply of the flow links
                    // every node has "packages" of information for trips to a certain destination: the
                    // TripInfoByDestination
                    // loop through this info to retrieve the demand by destination
                    for (TripInfoByDestination tripInfoByDestination : origin.getCellBehaviour().getTripInfoByNodeMap()
                            .values())
                    {
                        Set<BoundedNode> neighbours = tripInfoByDestination.getNeighbourAndRouteShare().keySet();
                        for (BoundedNode neighbour : neighbours)
                        {

                            if (neighbour.getId() != null)
                            {
                                // retrieve the neighbour area on the path to a certain destination
                                // only the flow links are considered in the CTM model, so we need a Flow node at
                                // the
                                // end of the link
                                if (neighbour.getBehaviourType() == TrafficBehaviourType.FLOW)
                                {
                                    // Do CTM
                                    // In case of Cell Transmission Links, there is an intermediate process of
                                    // traffic
                                    // moving over a link. The demand to this link is computed.
                                    // In Step 3 see if this demand is below the capacity of the link (supply)
                                    try
                                    {
                                        // Retrieve the cell transmission link
                                        // all cells (should) have identical characteristics
                                        LinkCellTransmission ctmLink =
                                                (LinkCellTransmission) model.getAreaGraph().getEdge(origin, neighbour)
                                                        .getLink();
                                        // Loop through the cells and do transmission
                                        for (FlowCell cell : ctmLink.getCells())
                                        {
                                            double accumulationCell = cell.getCellBehaviourFlow().getAccumulatedCars();
                                            // retrieve the current info of trips in this cell
                                            // at the first cell, demand comes from the FlowNode!!
                                            // maximum to enter this cell
                                            // **** RELEVANT
                                            DoubleScalar.Abs<FrequencyUnit> tripByHour =
                                                    cell.getCellBehaviourFlow().retrieveSupply(
                                                            accumulationCell,
                                                            cell.getCellBehaviourFlow()
                                                                    .getParametersFundamentalDiagram());
                                            double tripByStep =
                                                    model.getSettingsNTM().getTimeStepDurationNTM()
                                                            .getInUnit(TimeUnit.SECOND)
                                                            * tripByHour.getInUnit(FrequencyUnit.PER_SECOND);
                                            cell.getCellBehaviourFlow().setSupply(tripByStep);

                                            tripByHour =
                                                    cell.getCellBehaviourFlow().retrieveDemand(
                                                            accumulationCell,
                                                            cell.getCellBehaviourFlow()
                                                                    .getParametersFundamentalDiagram());
                                            tripByStep =
                                                    model.getSettingsNTM().getTimeStepDurationNTM()
                                                            .getInUnit(TimeUnit.SECOND)
                                                            * tripByHour.getInUnit(FrequencyUnit.PER_SECOND);
                                            cell.getCellBehaviourFlow().setDemand(tripByStep);
                                            TripInfoByDestination cellInfoByNodeMap =
                                                    cell.getCellBehaviourFlow().getTripInfoByNodeMap()
                                                            .get(tripInfoByDestination.getDestination());
                                            double demandToDestination = 0;
                                            if (accumulationCell > 0)
                                            {
                                                demandToDestination =
                                                        cellInfoByNodeMap.getAccumulatedCarsToDestination()
                                                                / accumulationCell
                                                                * cell.getCellBehaviourFlow().getDemand();
                                            }

                                            // **** RELEVANT
                                            cellInfoByNodeMap.setDemandToDestination(demandToDestination);

                                        }
                                        // demand from last Cell to the first cell of the down stream flow link
                                        FlowCell lastCell = ctmLink.getCells().get(ctmLink.getCells().size() - 1);

                                        Set<BoundedNode> nextNeighbours =
                                                neighbour.getCellBehaviour().getTripInfoByNodeMap()
                                                        .get(tripInfoByDestination.getDestination())
                                                        .getNeighbourAndRouteShare().keySet();
                                        for (BoundedNode nextNeighbour : nextNeighbours)
                                        {
                                            double addDemandToDestination =
                                                    lastCell.getCellBehaviourFlow().getTripInfoByNodeMap()
                                                            .get(tripInfoByDestination.getDestination())
                                                            .getDemandToDestination()
                                                            * tripInfoByDestination.getNeighbourAndRouteShare().get(
                                                                    neighbour);
                                            if (nextNeighbour.getBehaviourType() == TrafficBehaviourType.FLOW)
                                            {
                                                ctmLink =
                                                        (LinkCellTransmission) model.getAreaGraph()
                                                                .getEdge(neighbour, nextNeighbour).getLink();
                                                ctmLink.getCells().get(0).getCellBehaviourFlow()
                                                        .addDemandToEnter(addDemandToDestination);
                                                if (ctmLink.getCells().get(0).getCellBehaviourFlow().getDemandToEnter() > 10.0)
                                                {
                                                    System.out.println("Stop");
                                                }

                                            }
                                            else if (nextNeighbour.getBehaviourType() == TrafficBehaviourType.NTM
                                                    || nextNeighbour.getBehaviourType() == TrafficBehaviourType.CORDON)
                                            {
                                                nextNeighbour.getCellBehaviour().addDemandToEnter(
                                                        addDemandToDestination);
                                            }
                                        }

                                    }
                                    catch (Exception e)
                                    {
                                        e.printStackTrace();
                                    }
                                }

                                else
                                {
                                    System.out.println("CTMsimulation line 387: no neighbour...");
                                }
                            }
                            else
                            {
                                System.out.println("NTMSimulation line 44: Strange and to repair: nodeTo equals null");
                            }
                        }

                    }

                }

            }

            // in the next steps, the dynamics of demand and supply create a certain flow between areas
            catch (Exception e)
            {
                e.printStackTrace();
            }

        }

        // ********************************************************************************************************
        // STEP 3: FLUXES!!!!!
        // Monitor whether the demand of traffic from outside areas is able to enter a certain Area
        // Perhaps SUPPLY poses an upper bound on the Demand!
        for (Node node : model.getAreaGraph().vertexSet())
        {
            BoundedNode origin = (BoundedNode) node;
            try
            {
                if (origin.getCellBehaviour().getAccumulatedCars() < 0.0)
                {
                    System.out.println("Negative accumulation: step " + steps);
                }
                else if (origin.getCellBehaviour().getAccumulatedCars() >= 0.0)
                {
                    // Trips always start from an NTM or Cordon Node. If they pass a Flow Node they by definition enter
                    // a flow Link. The simulation of these flow links are carried out sequentially
                    if (origin.getBehaviourType() == TrafficBehaviourType.NTM
                            || origin.getBehaviourType() == TrafficBehaviourType.CORDON)
                    {
                        for (TripInfoByDestination tripInfoByDestination : origin.getCellBehaviour()
                                .getTripInfoByNodeMap().values())
                        {
                            if (tripInfoByDestination.getAccumulatedCarsToDestination() >= 0)
                            {
                                Set<BoundedNode> neighbours =
                                        tripInfoByDestination.getNeighbourAndRouteShare().keySet();
                                for (BoundedNode neighbour : neighbours)
                                {
                                    BoundedNode destination = (BoundedNode) tripInfoByDestination.getDestination();

                                    if (neighbour.getBehaviourType() == TrafficBehaviourType.NTM
                                            || neighbour.getBehaviourType() == TrafficBehaviourType.CORDON)
                                    {
                                        // retrieve the neighbour area on the path to a certain destination
                                        if (neighbour != null && tripInfoByDestination.getDemandToDestination() > 0.0)
                                        {
                                            // retrieve the type of CellBehaviour (showing the demand and supply
                                            // characteristics of this neighbour)
                                            double demandToNeighbour =
                                                    tripInfoByDestination.getDemandToDestination()
                                                            * tripInfoByDestination.getNeighbourAndRouteShare().get(
                                                                    neighbour);
                                            // compute the share of traffic that wants to enter this Neighbour area from
                                            // a certain origin - destination pair as part of the total demand that
                                            // wants to enter the neighbour cell. The total supply to the neighbour may
                                            // be restricted (by calling getSupply that provides the maximum Supply).
                                            double totalDemand =
                                                    Math.min(neighbour.getCellBehaviour().getDemandToEnter(), neighbour
                                                            .getCellBehaviour().getSupply());

                                            double flowToNeighbour = 0;
                                            if (neighbour.getCellBehaviour().getDemandToEnter() > 0
                                                    && demandToNeighbour > 0)
                                            {
                                                flowToNeighbour =
                                                        (demandToNeighbour / neighbour.getCellBehaviour()
                                                                .getDemandToEnter()) * totalDemand;
                                            }
                                            // Compute the final flow based on the share of Trips
                                            // to a certain destination and this maximum supply of the Cell.
                                            // set the final flow to the neighbour

                                            // **** RELEVANT
                                            if (neighbour != destination)
                                            {
                                                if (neighbour.getCellBehaviour().getTripInfoByNodeMap()
                                                        .get(destination) == null)
                                                {
                                                    System.out.println("null");
                                                }
                                                else
                                                {
                                                    neighbour.getCellBehaviour().addAccumulatedCars(flowToNeighbour);
                                                    neighbour.getCellBehaviour().getTripInfoByNodeMap()
                                                            .get(destination)
                                                            .addAccumulatedCarsToDestination(flowToNeighbour);
                                                }
                                            }
                                            else
                                            {
                                                if (flowToNeighbour > 0)
                                                {
                                                    // TODO (what to do here??)
                                                    destination.getCellBehaviour().addArrivals(flowToNeighbour);
                                                    tripInfoByDestination.addArrivedTrips(flowToNeighbour);
                                                }
                                            }
                                            tripInfoByDestination.addAccumulatedCarsToDestination(-flowToNeighbour);
                                            tripInfoByDestination.addFluxToNeighbour(flowToNeighbour);
                                            origin.getCellBehaviour().addAccumulatedCars(-flowToNeighbour);
                                        }
                                        else if (tripInfoByDestination.getDemandToDestination() == 0.0)
                                        {
                                            // System.out.println("NTMSimulation line 471: no demand to neighbour");
                                        }
                                        else
                                        {
                                            System.out.println("NTMSimulation line 475: no neighbour");
                                        }

                                    }

                                    // else do the simulation of flow links
                                    else if (neighbour.getBehaviourType() == TrafficBehaviourType.FLOW)
                                    {
                                        // determine the next movement: a flow link
                                        double demandToNeighbour =
                                                tripInfoByDestination.getDemandToDestination()
                                                        * tripInfoByDestination.getNeighbourAndRouteShare().get(
                                                                neighbour);
                                        // retrieve the downstream Flow node opportunities
                                        Set<BoundedNode> nextNeighbours =
                                                neighbour.getCellBehaviour().getTripInfoByNodeMap().get(destination)
                                                        .getNeighbourAndRouteShare().keySet();
                                        // tripInfoByDestination.getNeighbourAndRouteShare().keySet();
                                        for (BoundedNode nextNeighbour : nextNeighbours)
                                        {

                                            LinkCellTransmission ctmLink =
                                                    (LinkCellTransmission) model.getAreaGraph()
                                                            .getEdge(neighbour, nextNeighbour).getLink();
                                            // when entering a flow link, loop through all succeeding flow links until
                                            // reaching
                                            // a NTM or CORODN node :#
                                            // ArrayList<LinkCellTransmission> ctmLinks =
                                            // new ArrayList<LinkCellTransmission>();
                                            // ctmLinks.add(ctmLink);
                                            // HashMap<LinkCellTransmission, FlowCell> ctmLinks =\

                                            // Recursive method!!
                                            simulateFlowLink(model.getAreaGraph(), ctmLink, origin, destination,
                                                    neighbour, nextNeighbour, demandToNeighbour, tripInfoByDestination,
                                                    null, 0);
                                        }
                                    }

                                }

                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
        if (model.WRITEDATA)
        {
            // WriteOutput.writeOutputDataFlowLinks(model, steps, MAXSTEPS);
            WriteOutput.writeOutputDataNTM(model, steps, MAXSTEPS);
        }
    }

    /**
     * @param areaGraph
     * @param ctmLink
     * @param origin
     * @param destination
     * @param neighbour
     * @param nextNeighbour
     * @param demandToNeighbour
     * @param tripInfoByDestination
     * @param lastCellFromPreviousLink
     */
    public static HashMap<LinkCellTransmission, FlowCell> simulateFlowLink(
            SimpleDirectedWeightedGraph<Node, LinkEdge<Link>> areaGraph, LinkCellTransmission ctmLink,
            BoundedNode origin, BoundedNode destination, BoundedNode neighbour, BoundedNode nextNeighbour,
            double demandToNeighbour, TripInfoByDestination tripInfoByDestination, FlowCell lastCellFromPreviousLink,
            double share)
    {
        HashMap<LinkCellTransmission, FlowCell> ctmLinkLastCellMap = new HashMap<LinkCellTransmission, FlowCell>();
        // Retrieve the cell transmission link
        // all cells (should) have identical characteristics
        FlowCell prevCell = null;
        double demandToNextNeighbour;
        TripInfoByDestination neighbourTripInfoByDestination =
                neighbour.getCellBehaviour().getTripInfoByNodeMap().get(destination);

        for (FlowCell cell : ctmLink.getCells())
        {
            double demandCell;
            double supplyCell;
            // at the first cell after the NTM/Cordon Node, demand comes from
            // the FlowNode!!
            if (ctmLink.getCells().indexOf(cell) == 0)
            {
                // next statement: if we are regarding downstream flow links
                if (lastCellFromPreviousLink == null)
                {
                    share = neighbourTripInfoByDestination.getNeighbourAndRouteShare().get(nextNeighbour);
                    // * tripInfoByDestination.getNeighbourAndRouteShare().get(
                    // nextNeighbour);
                    demandToNextNeighbour = demandToNeighbour * share;
                    // Loop through the cells and do transmission
                }
                else
                {
                    // TODO SHARE should be recomputed!!!!!
                    demandToNextNeighbour =
                            cell.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination)
                                    .getDemandToDestination();
                    demandToNextNeighbour =
                            share
                                    * lastCellFromPreviousLink.getCellBehaviourFlow().getTripInfoByNodeMap()
                                            .get(destination).getDemandToDestination();
                    if (demandToNextNeighbour > 10)
                    {
                        System.out.println("Stop");
                    }
                }
                if (demandToNextNeighbour >= 0)
                {
                    // maximum to enter this cell
                    supplyCell = cell.getCellBehaviourFlow().getSupply();
                    demandCell = cell.getCellBehaviourFlow().getDemandToEnter();
                    // tripInfoByDestination.getDemandToNeighbour();
                    double flowToDestination = 0;
                    if (demandCell > 0)
                    {
                        flowToDestination = Math.min(supplyCell / demandCell, 1.0) * demandToNextNeighbour;
                    }
                    // **** RELEVANT
                    cell.getCellBehaviourFlow().addAccumulatedCars(flowToDestination);
                    cell.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination)
                            .addAccumulatedCarsToDestination(flowToDestination);
                    if (lastCellFromPreviousLink != null)
                    {
                        lastCellFromPreviousLink.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination)
                                .addAccumulatedCarsToDestination(-flowToDestination);
                        lastCellFromPreviousLink.getCellBehaviourFlow().addAccumulatedCars(-flowToDestination);
                    }
                    else
                    {
                        tripInfoByDestination.addAccumulatedCarsToDestination(-flowToDestination);
                        origin.getCellBehaviour().addAccumulatedCars(-flowToDestination);
                    }

                }
                // this cell becomes the previous cell for the next step (going
                // to the downstream cell)
                prevCell = cell;
            }
            else
            {
                // determine demand by cell
                // maximum to enter this cell
                demandToNextNeighbour =
                        prevCell.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination)
                                .getDemandToDestination();
                // determine the downstream cells (but the last):
                if (ctmLink.getCells().indexOf(cell) < ctmLink.getCells().size())
                {
                    if (demandToNextNeighbour >= 0)
                    {
                        // FlowCell downStreamCell =
                        // ctmLink.getCells().get(
                        // ctmLink.getCells().indexOf(cell) + 1);
                        supplyCell = cell.getCellBehaviourFlow().getSupply();
                        demandCell = prevCell.getCellBehaviourFlow().getDemand();
                        // tripInfoByDestination.getDemandToNeighbour();
                        double flowToDestination = 0;
                        if (demandCell > 0)
                        {
                            flowToDestination = Math.min(supplyCell / demandCell, 1.0) * demandToNextNeighbour;
                        }
                        // **** RELEVANT
                        cell.getCellBehaviourFlow().addAccumulatedCars(flowToDestination);
                        cell.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination)
                                .addAccumulatedCarsToDestination(flowToDestination);
                        prevCell.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination)
                                .addAccumulatedCarsToDestination(-flowToDestination);
                        prevCell.getCellBehaviourFlow().addAccumulatedCars(-flowToDestination);
                    }
                }
            }
            // the last cell of the cell transmission link
            if (ctmLink.getCells().indexOf(cell) == ctmLink.getCells().size() - 1)
            // at the last cell, the trips are forwarded to the next Node: could
            // be
            // NTM, Flow or Cordon
            // if it is a NTM or Flow, there could be a back loop
            {
                // determine demand by cell
                // maximum to enter this cell
                demandToNextNeighbour =
                        cell.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination).getDemandToDestination();
                TripInfoByDestination nextNeighbourTripInfoByDestination =
                        nextNeighbour.getCellBehaviour().getTripInfoByNodeMap().get(destination);
                // BoundedNode nextNextNeighbour =
                // (BoundedNode)
                // nextNeighbourTripInfoByDestination.getNeighbour();
                Set<BoundedNode> nextNextNeighbours =
                        nextNeighbourTripInfoByDestination.getNeighbourAndRouteShare().keySet();
                for (BoundedNode nextNextNeighbour : nextNextNeighbours)
                {
                    share = nextNeighbourTripInfoByDestination.getNeighbourAndRouteShare().get(nextNextNeighbour);
                    if (nextNextNeighbour.getBehaviourType() == TrafficBehaviourType.NTM
                            || nextNextNeighbour.getBehaviourType() == TrafficBehaviourType.CORDON)
                    {
                        if (demandToNextNeighbour >= 0)
                        {
                            supplyCell = nextNextNeighbour.getCellBehaviour().getSupply();
                            demandCell = nextNextNeighbour.getCellBehaviour().getDemandToEnter();
                            // tripInfoByDestination.getDemandToNeighbour();
                            double flowToDestination = 0;
                            if (demandCell > 0)
                            {
                                flowToDestination =
                                        share * Math.min(supplyCell / demandCell, 1.0) * demandToNextNeighbour;
                            }
                            // **** RELEVANT
                            if (nextNextNeighbour != destination)
                            {
                                nextNextNeighbour.getCellBehaviour().addAccumulatedCars(flowToDestination);
                                nextNextNeighbour.getCellBehaviour().getTripInfoByNodeMap().get(destination)
                                        .addAccumulatedCarsToDestination(flowToDestination);
                                cell.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination)
                                        .addAccumulatedCarsToDestination(-flowToDestination);
                                cell.getCellBehaviourFlow().addAccumulatedCars(-flowToDestination);
                            }
                            else
                            {
                                // trips have arrived at destination!
                                if (demandToNextNeighbour > 0)
                                {
                                    destination.getCellBehaviour().addArrivals(demandToNextNeighbour);
                                    cell.getCellBehaviourFlow().getTripInfoByNodeMap().get(destination)
                                            .addAccumulatedCarsToDestination(-demandToNextNeighbour);
                                    cell.getCellBehaviourFlow().addAccumulatedCars(-demandToNextNeighbour);
                                }
                            }

                        }
                        neighbour = nextNeighbour;
                        nextNeighbour = nextNextNeighbour;
                    }

                    else if (nextNextNeighbour.getBehaviourType() == TrafficBehaviourType.FLOW)
                    {
                        // set the variables for the next loop (while...)
                        {
                            neighbour = nextNeighbour;
                            nextNeighbour = nextNextNeighbour;
                            ctmLink = (LinkCellTransmission) areaGraph.getEdge(neighbour, nextNeighbour).getLink();
                            lastCellFromPreviousLink = cell;
                            // recursive loop for downstream Cell Transmission links!!
                            simulateFlowLink(areaGraph, ctmLink, origin, destination, neighbour, nextNeighbour, 0.0,
                                    null, lastCellFromPreviousLink, share);
                            ctmLinkLastCellMap.put(ctmLink, lastCellFromPreviousLink);
                        }
                    }
                }
            }
            prevCell = cell;

        }
        return ctmLinkLastCellMap;
    }

}
