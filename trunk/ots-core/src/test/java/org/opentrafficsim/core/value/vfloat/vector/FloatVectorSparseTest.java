package org.opentrafficsim.core.value.vfloat.vector;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.opentrafficsim.core.unit.LengthUnit;
import org.opentrafficsim.core.unit.TemperatureUnit;
import org.opentrafficsim.core.unit.Unit;
import org.opentrafficsim.core.value.ValueException;
import org.opentrafficsim.core.value.vfloat.scalar.FloatScalar;

/**
 * Test the FloatVector class.
 * <p>
 * This file was generated by the OpenTrafficSim value test classes generator, 26 jun, 2015
 * <p>
 * Copyright (c) 2015 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights reserved. <br>
 * BSD-style license. See <a href="http://opentrafficsim.org/node/13">OpenTrafficSim License</a>.
 * <p>
 * $LastChangedDate$, @version $Revision$, by $Author: pknoppers
 * $, initial version 6 jun, 2015 <br>
 * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>
 * @author <a href="http://www.tudelft.nl/pknoppers">Peter Knoppers</a>
 */
public class FloatVectorSparseTest
{
    /**
     * Generate test data.
     * @param size int; number of values in the result
     * @param startValue float; seed value
     * @return float[]
     */
    private static float[] data(final int size, final float startValue)
    {
        float[] result = new float[size];
        for (int index = 0; index < size; index++)
        {
            result[index] = index + startValue;
        }
        return result;
    }

    /**
     * Check that the values in a FloatVectormatch the expected values.
     * @param fv FloatVector&lt;?&gt;; the FloatVector to match
     * @param reference float[]; the reference values
     * @param precision float; the maximum allowed error
     * @param u Unit&lt;?&gt;; the expected type
     * @param expectAbsolute boolean; if true; fv should be Absolute; if false; fv should be Relative
     */
    private static void checkContentsAndType(final FloatVector<?> fv, final float[] reference, final float precision,
            final Unit<?> u, final boolean expectAbsolute)
    {
        assertTrue("FloatVector should not be null", null != fv);
        for (int index = fv.size(); --index >= 0;)
        {
            try
            {
                assertEquals("Value should match", reference[index], fv.getInUnit(index), precision);
            }
            catch (ValueException exception)
            {
                fail("Unexpected exception");
            }
        }
        assertEquals("Unit should be " + u.toString(), u, fv.getUnit());
        assertTrue("Should be " + (expectAbsolute ? "Absolute" : "Relative"),
                expectAbsolute ? fv.isAbsolute() : fv.isRelative());
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toStringAbsTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            float[] value = data(3, 38.0f);
            FloatVector.Abs.Sparse<TemperatureUnit> fv = new FloatVector.Abs.Sparse<TemperatureUnit>(value, tempUnit);
            String result = fv.toString(true, true);
            assertTrue("toString result contains \" Abs \"", result.contains(" Abs "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Immutable"));
            assertTrue("toString contains \"Sparse\"", result.contains("Sparse"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toStringMutableAbsTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            float[] value = data(3, 38.0f);
            MutableFloatVector.Abs.Sparse<TemperatureUnit> fv =
                    new MutableFloatVector.Abs.Sparse<TemperatureUnit>(value, tempUnit);
            String result = fv.toString(true, true);
            assertTrue("toString result contains \" Abs \"", result.contains(" Abs "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Mutable"));
            assertTrue("toString contains \"Sparse\"", result.contains("Sparse"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test constructor, verify the various fields in the constructed objects, test conversions to related units.
     */
    @SuppressWarnings({"static-method", "unchecked"})
    @Test
    public final void basicsAbsTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            float[] value = data(3, 38.0f);
            FloatVector.Abs.Sparse<TemperatureUnit> temperatureFV =
                    new FloatVector.Abs.Sparse<TemperatureUnit>(value, tempUnit);
            checkContentsAndType(temperatureFV, value, 0.001f, tempUnit, true);
            assertEquals("Value in SI is equivalent in Kelvin", 311.15f, temperatureFV.getSI(0), 0.05);
            assertEquals("Value in Fahrenheit", 100.4f, temperatureFV.getInUnit(0, TemperatureUnit.DEGREE_FAHRENHEIT),
                    0.1);
            float[] out = temperatureFV.getValuesInUnit();
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("Value should match", value[index], out[index], 0.001);
            }
            MutableFloatVector.Abs.Sparse<TemperatureUnit> mfv =
                    new MutableFloatVector.Abs.Sparse<TemperatureUnit>(value, tempUnit);
            checkContentsAndType(mfv, value, 0.001f, tempUnit, true);
            mfv.setSI(0, 73);
            float safe = value[0];
            value[0] = -200; // Approximate Celsius equivalent of 73 Kelvin
            checkContentsAndType(mfv, value, 1, tempUnit, true);
            value[0] = safe; // Restore
            mfv.set(0, temperatureFV.get(0));
            checkContentsAndType(mfv, value, 0.001f, tempUnit, true);
            FloatVector.Abs.Sparse<TemperatureUnit> temperature2FV =
                    new FloatVector.Abs.Sparse<TemperatureUnit>(temperatureFV.getVectorSI(), TemperatureUnit.KELVIN);
            assertTrue("temperature2FV should be equal to temperatureFV", temperature2FV.equals(temperatureFV));
            assertTrue("Value is Absolute", temperatureFV.isAbsolute());
            assertFalse("Value is not Relative", temperatureFV.isRelative());
            temperatureFV = new FloatVector.Abs.Sparse<TemperatureUnit>(value, TemperatureUnit.KELVIN);
            checkContentsAndType(temperatureFV, value, 0.001f, TemperatureUnit.KELVIN, true);
            out = temperatureFV.getValuesSI();
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("Value should match", value[index], out[index], 0.001);
            }
            FloatScalar.Abs<TemperatureUnit>[] scalar = new FloatScalar.Abs[value.length];
            for (int index = 0; index < value.length; index++)
            {
                scalar[index] = new FloatScalar.Abs<TemperatureUnit>(value[index], TemperatureUnit.DEGREE_CELSIUS);
            }
            temperatureFV = new FloatVector.Abs.Sparse<TemperatureUnit>(scalar);
            checkContentsAndType(temperatureFV, value, 0.001f, tempUnit, true);
            assertEquals("All cells != 0; cardinality should equal number of cells", value.length,
                    temperatureFV.cardinality());
            float sum = 0;
            for (int index = 0; index < value.length; index++)
            {
                sum += temperatureFV.getSI(index);
            }
            assertEquals("zSum should be sum of all values", sum, temperatureFV.zSum(), 0.001);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test conversion to mutable equivalent and back.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toMutableAndBackAbsTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            float[] value = data(3, 38.0f);
            float[] value2 = data(3, 38.0f);
            value2[0] = 12345;
            FloatVector.Abs.Sparse<TemperatureUnit> fv = new FloatVector.Abs.Sparse<TemperatureUnit>(value, tempUnit);
            FloatVector.Abs<TemperatureUnit> fvCopy = fv.copy();
            MutableFloatVector.Abs.Sparse<TemperatureUnit> mfv = fv.mutable();
            checkContentsAndType(fv, value, 0.001f, tempUnit, true);
            checkContentsAndType(mfv, value, 0.001f, tempUnit, true);
            checkContentsAndType(fvCopy, value, 0.001f, tempUnit, true);
            MutableFloatVector.Abs.Sparse<TemperatureUnit> mfvCopy = mfv.copy();
            checkContentsAndType(mfvCopy, value, 0.001f, tempUnit, true);
            MutableFloatVector.Abs.Sparse<TemperatureUnit> mmfv = mfv.mutable();
            checkContentsAndType(mmfv, value, 0.001f, tempUnit, true);
            assertEquals("hashCode is independent on mutability", fv.hashCode(), mfv.hashCode());
            // Modify mfv
            mfv.setInUnit(0, 12345, TemperatureUnit.DEGREE_CELSIUS);
            checkContentsAndType(fv, value, 0.001f, tempUnit, true);
            checkContentsAndType(mfv, value2, 0.01f, tempUnit, true);
            checkContentsAndType(mfvCopy, value, 0.001f, tempUnit, true);
            checkContentsAndType(mmfv, value, 0.001f, tempUnit, true);
            FloatVector.Abs<TemperatureUnit> ifv = mfv.immutable();
            assertTrue("Different value extremely likely results in different hashCode",
                    fv.hashCode() != mfv.hashCode());
            // Restore value of mfv
            mfv.setSI(0, fv.getSI(0));
            checkContentsAndType(ifv, value2, 0.01f, tempUnit, true);
            checkContentsAndType(mfv, value, 0.001f, tempUnit, true);
            checkContentsAndType(mmfv, value, 0.001f, tempUnit, true);
            mmfv.setSI(0, 0);
            checkContentsAndType(mfv, value, 0.001f, tempUnit, true);
            assertEquals("value should be about -273", -273, mmfv.getInUnit(0, tempUnit), 0.2);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test the equals method.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void equalsAbsTest()
    {
        LengthUnit lengthUnit = LengthUnit.METER;
        float value = 38.0f;
        FloatScalar.Abs<LengthUnit> fv = new FloatScalar.Abs<LengthUnit>(value, lengthUnit);
        assertTrue("Equal to itself", fv.equals(fv));
        assertFalse("Not equal to null", fv.equals(null));
        assertFalse("Not equal to some other kind of object; e.g. a String", fv.equals(new String("abc")));
        FloatScalar.Rel<LengthUnit> fvCounterPart = new FloatScalar.Rel<LengthUnit>(value, lengthUnit);
        assertFalse("Not equal if one Absolute and other Relative", fv.equals(fvCounterPart));
        FloatScalar.Abs<TemperatureUnit> fvWrongBaseUnit =
                new FloatScalar.Abs<TemperatureUnit>(value, TemperatureUnit.KELVIN);
        assertEquals("The underlying SI values are the same", fv.getSI(), fvWrongBaseUnit.getSI(), 0.0001f);
        assertFalse("Not equals because the standard SI unit differs", fv.equals(fvWrongBaseUnit));
        FloatScalar.Abs<LengthUnit> fvCompatibleUnit = new FloatScalar.Abs<LengthUnit>(38000.0f, LengthUnit.MILLIMETER);
        assertFalse("Units are different", fv.getUnit().equals(fvCompatibleUnit.getUnit()));
        assertTrue("equals returns true", fv.equals(fvCompatibleUnit));
        FloatScalar.Abs<LengthUnit> fvDifferentValue = new FloatScalar.Abs<LengthUnit>(123.456f, LengthUnit.MILLIMETER);
        assertFalse("Different value makes equals return false", fv.equals(fvDifferentValue));
    }

    /**
     * Test the Math functions.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void mathFunctionsTestAbsTest()
    {
        float[] seedValues = {-10f, -2f, -1f, -0.5f, -0.1f, 0f, 0.1f, 0.5f, 1f, 2f, 10f};
        for (float seedValue : seedValues)
        {
            float[] input = data(3, seedValue);
            MutableFloatVector.Abs.Sparse<LengthUnit> fv;
            try
            {
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.abs();
                MathTester.tester(input, "abs", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return Math.abs(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.acos();
                MathTester.tester(input, "acos", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.acos(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.asin();
                MathTester.tester(input, "asin", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.asin(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.atan();
                MathTester.tester(input, "atan", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.atan(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.cbrt();
                MathTester.tester(input, "cbrt", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.cbrt(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.ceil();
                MathTester.tester(input, "ceil", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.ceil(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.cos();
                MathTester.tester(input, "cos", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.cos(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.cosh();
                MathTester.tester(input, "cosh", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.cosh(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.exp();
                MathTester.tester(input, "exp", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.exp(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.expm1();
                MathTester.tester(input, "expm1", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.expm1(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.floor();
                MathTester.tester(input, "floor", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.floor(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.log();
                MathTester.tester(input, "log", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.log(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.log10();
                MathTester.tester(input, "log10", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.log10(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.log1p();
                MathTester.tester(input, "log1p", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.log1p(f);
                    }
                });
                for (int i = -10; i <= 10; i++)
                {
                    final float exponent = i * 0.5f;
                    fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                    fv.pow(exponent);
                    MathTester.tester(input, "pow(" + exponent + ")", fv, 0.001, new FloatToFloat()
                    {
                        @Override
                        public float function(final float f)
                        {
                            return (float) Math.pow(f, exponent);
                        }
                    });
                }
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.rint();
                MathTester.tester(input, "rint", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.rint(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.round();
                MathTester.tester(input, "round", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return Math.round(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.signum();
                MathTester.tester(input, "signum", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return Math.signum(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.sin();
                MathTester.tester(input, "sin", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.sin(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.sinh();
                MathTester.tester(input, "sinh", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.sinh(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.sqrt();
                MathTester.tester(input, "sqrt", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.sqrt(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.tan();
                MathTester.tester(input, "tan", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.tan(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.tanh();
                MathTester.tester(input, "tanh", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.tanh(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.toDegrees();
                MathTester.tester(input, "toDegrees", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.toDegrees(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.toRadians();
                MathTester.tester(input, "toRadians", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.toRadians(f);
                    }
                });
                fv = new MutableFloatVector.Abs.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.inv();
                MathTester.tester(input, "inv", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return 1 / f;
                    }
                });
            }
            catch (ValueException ve)
            {
                fail("Caught unexpected ValueException: " + ve.toString());
            }
        }
    }

    /**
     * Test plus(FloatVectorAbs.Sparse, FloatVectorRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryplusOfAbsSparseAndRelDenseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Abs.Sparse<LengthUnit> left =
                    new FloatVector.Abs.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Dense<LengthUnit> right =
                    new FloatVector.Rel.Dense<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Abs.Dense<?> result = FloatVector.plus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI plus of contributing elements",
                        left.getSI(i) + right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(FloatVectorAbs.Sparse, FloatVectorRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryminusOfAbsSparseAndRelDenseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Abs.Sparse<LengthUnit> left =
                    new FloatVector.Abs.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Dense<LengthUnit> right =
                    new FloatVector.Rel.Dense<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Abs.Dense<?> result = FloatVector.minus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI minus of contributing elements",
                        left.getSI(i) - right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test times(FloatVectorAbs.Sparse, FloatVectorAbs.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binarytimesOfAbsSparseAndAbsDenseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Abs.Sparse<LengthUnit> left =
                    new FloatVector.Abs.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Abs.Dense<LengthUnit> right =
                    new FloatVector.Abs.Dense<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Abs.Sparse<?> result = FloatVector.times(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI times of contributing elements",
                        left.getSI(i) * right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test plus(FloatVectorAbs.Sparse, FloatVectorRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryplusOfAbsSparseAndRelSparseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Abs.Sparse<LengthUnit> left =
                    new FloatVector.Abs.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Sparse<LengthUnit> right =
                    new FloatVector.Rel.Sparse<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Abs.Sparse<?> result = FloatVector.plus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI plus of contributing elements",
                        left.getSI(i) + right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(FloatVectorAbs.Sparse, FloatVectorRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryminusOfAbsSparseAndRelSparseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Abs.Sparse<LengthUnit> left =
                    new FloatVector.Abs.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Sparse<LengthUnit> right =
                    new FloatVector.Rel.Sparse<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Abs.Sparse<?> result = FloatVector.minus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI minus of contributing elements",
                        left.getSI(i) - right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test times(FloatVectorAbs.Sparse, FloatVectorAbs.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binarytimesOfAbsSparseAndAbsSparseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Abs.Sparse<LengthUnit> left =
                    new FloatVector.Abs.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Abs.Sparse<LengthUnit> right =
                    new FloatVector.Abs.Sparse<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Abs.Sparse<?> result = FloatVector.times(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI times of contributing elements",
                        left.getSI(i) * right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test that malformed or mismatching arrays throw a ValueException.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void sizeCheckAbsTest()
    {
        int junk = 0;
        try
        {
            // null array
            new FloatVector.Abs.Sparse<TemperatureUnit>((float[]) null, TemperatureUnit.DEGREE_FAHRENHEIT);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        assertTrue("The variable junk is only used to suppress annoying warnings of the code checker", junk > 0);
    }

    /**
     * Test that the times methods with a simple array as the 2nd argument.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void scaleAbsTest()
    {
        try
        {
            float[] leftIn = data(3, -12.34f);
            FloatVector.Abs.Sparse<TemperatureUnit> left =
                    new FloatVector.Abs.Sparse<TemperatureUnit>(leftIn, TemperatureUnit.KELVIN);
            float[] right = data(3, -4.321f);
            MutableFloatVector.Abs.Sparse<TemperatureUnit> result = FloatVector.times(left, right);
            assertEquals("Result should be in Kelvin", TemperatureUnit.KELVIN, result.getUnit());
            for (int index = right.length; --index >= 0;)
            {
                assertEquals("Content should match product of left and right", leftIn[index] * right[index],
                        result.getSI(index), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toStringRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            float[] value = data(3, 38.0f);
            FloatVector.Rel.Sparse<TemperatureUnit> fv = new FloatVector.Rel.Sparse<TemperatureUnit>(value, tempUnit);
            String result = fv.toString(true, true);
            assertTrue("toString result contains \" Rel \"", result.contains(" Rel "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Immutable"));
            assertTrue("toString contains \"Sparse\"", result.contains("Sparse"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toStringMutableRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            float[] value = data(3, 38.0f);
            MutableFloatVector.Rel.Sparse<TemperatureUnit> fv =
                    new MutableFloatVector.Rel.Sparse<TemperatureUnit>(value, tempUnit);
            String result = fv.toString(true, true);
            assertTrue("toString result contains \" Rel \"", result.contains(" Rel "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Mutable"));
            assertTrue("toString contains \"Sparse\"", result.contains("Sparse"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test constructor, verify the various fields in the constructed objects, test conversions to related units.
     */
    @SuppressWarnings({"static-method", "unchecked"})
    @Test
    public final void basicsRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            float[] value = data(3, 38.0f);
            FloatVector.Rel.Sparse<TemperatureUnit> temperatureFV =
                    new FloatVector.Rel.Sparse<TemperatureUnit>(value, tempUnit);
            checkContentsAndType(temperatureFV, value, 0.001f, tempUnit, false);
            assertEquals("Value in SI is equivalent in Kelvin", 311.15f, temperatureFV.getSI(0), 0.05);
            assertEquals("Value in Fahrenheit", 100.4f, temperatureFV.getInUnit(0, TemperatureUnit.DEGREE_FAHRENHEIT),
                    0.1);
            float[] out = temperatureFV.getValuesInUnit();
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("Value should match", value[index], out[index], 0.001);
            }
            MutableFloatVector.Rel.Sparse<TemperatureUnit> mfv =
                    new MutableFloatVector.Rel.Sparse<TemperatureUnit>(value, tempUnit);
            checkContentsAndType(mfv, value, 0.001f, tempUnit, false);
            mfv.setSI(0, 73);
            float safe = value[0];
            value[0] = -200; // Approximate Celsius equivalent of 73 Kelvin
            checkContentsAndType(mfv, value, 1, tempUnit, false);
            value[0] = safe; // Restore
            mfv.set(0, temperatureFV.get(0));
            checkContentsAndType(mfv, value, 0.001f, tempUnit, false);
            FloatVector.Rel.Sparse<TemperatureUnit> temperature2FV =
                    new FloatVector.Rel.Sparse<TemperatureUnit>(temperatureFV.getVectorSI(), TemperatureUnit.KELVIN);
            assertTrue("temperature2FV should be equal to temperatureFV", temperature2FV.equals(temperatureFV));
            assertTrue("Value is Relative", temperatureFV.isRelative());
            assertFalse("Value is not Absolute", temperatureFV.isAbsolute());
            temperatureFV = new FloatVector.Rel.Sparse<TemperatureUnit>(value, TemperatureUnit.KELVIN);
            checkContentsAndType(temperatureFV, value, 0.001f, TemperatureUnit.KELVIN, false);
            out = temperatureFV.getValuesSI();
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("Value should match", value[index], out[index], 0.001);
            }
            FloatScalar.Rel<TemperatureUnit>[] scalar = new FloatScalar.Rel[value.length];
            for (int index = 0; index < value.length; index++)
            {
                scalar[index] = new FloatScalar.Rel<TemperatureUnit>(value[index], TemperatureUnit.DEGREE_CELSIUS);
            }
            temperatureFV = new FloatVector.Rel.Sparse<TemperatureUnit>(scalar);
            checkContentsAndType(temperatureFV, value, 0.001f, tempUnit, false);
            assertEquals("All cells != 0; cardinality should equal number of cells", value.length,
                    temperatureFV.cardinality());
            float sum = 0;
            for (int index = 0; index < value.length; index++)
            {
                sum += temperatureFV.getSI(index);
            }
            assertEquals("zSum should be sum of all values", sum, temperatureFV.zSum(), 0.001);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test conversion to mutable equivalent and back.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toMutableAndBackRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            float[] value = data(3, 38.0f);
            float[] value2 = data(3, 38.0f);
            value2[0] = 12345;
            FloatVector.Rel.Sparse<TemperatureUnit> fv = new FloatVector.Rel.Sparse<TemperatureUnit>(value, tempUnit);
            FloatVector.Rel<TemperatureUnit> fvCopy = fv.copy();
            MutableFloatVector.Rel.Sparse<TemperatureUnit> mfv = fv.mutable();
            checkContentsAndType(fv, value, 0.001f, tempUnit, false);
            checkContentsAndType(mfv, value, 0.001f, tempUnit, false);
            checkContentsAndType(fvCopy, value, 0.001f, tempUnit, false);
            MutableFloatVector.Rel.Sparse<TemperatureUnit> mfvCopy = mfv.copy();
            checkContentsAndType(mfvCopy, value, 0.001f, tempUnit, false);
            MutableFloatVector.Rel.Sparse<TemperatureUnit> mmfv = mfv.mutable();
            checkContentsAndType(mmfv, value, 0.001f, tempUnit, false);
            assertEquals("hashCode is independent on mutability", fv.hashCode(), mfv.hashCode());
            // Modify mfv
            mfv.setInUnit(0, 12345, TemperatureUnit.DEGREE_CELSIUS);
            checkContentsAndType(fv, value, 0.001f, tempUnit, false);
            checkContentsAndType(mfv, value2, 0.01f, tempUnit, false);
            checkContentsAndType(mfvCopy, value, 0.001f, tempUnit, false);
            checkContentsAndType(mmfv, value, 0.001f, tempUnit, false);
            FloatVector.Rel<TemperatureUnit> ifv = mfv.immutable();
            assertTrue("Different value extremely likely results in different hashCode",
                    fv.hashCode() != mfv.hashCode());
            // Restore value of mfv
            mfv.setSI(0, fv.getSI(0));
            checkContentsAndType(ifv, value2, 0.01f, tempUnit, false);
            checkContentsAndType(mfv, value, 0.001f, tempUnit, false);
            checkContentsAndType(mmfv, value, 0.001f, tempUnit, false);
            mmfv.setSI(0, 0);
            checkContentsAndType(mfv, value, 0.001f, tempUnit, false);
            assertEquals("value should be about -273", -273, mmfv.getInUnit(0, tempUnit), 0.2);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test the equals method.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void equalsRelTest()
    {
        LengthUnit lengthUnit = LengthUnit.METER;
        float value = 38.0f;
        FloatScalar.Rel<LengthUnit> fv = new FloatScalar.Rel<LengthUnit>(value, lengthUnit);
        assertTrue("Equal to itself", fv.equals(fv));
        assertFalse("Not equal to null", fv.equals(null));
        assertFalse("Not equal to some other kind of object; e.g. a String", fv.equals(new String("abc")));
        FloatScalar.Abs<LengthUnit> fvCounterPart = new FloatScalar.Abs<LengthUnit>(value, lengthUnit);
        assertFalse("Not equal if one Absolute and other Relative", fv.equals(fvCounterPart));
        FloatScalar.Rel<TemperatureUnit> fvWrongBaseUnit =
                new FloatScalar.Rel<TemperatureUnit>(value, TemperatureUnit.KELVIN);
        assertEquals("The underlying SI values are the same", fv.getSI(), fvWrongBaseUnit.getSI(), 0.0001f);
        assertFalse("Not equals because the standard SI unit differs", fv.equals(fvWrongBaseUnit));
        FloatScalar.Rel<LengthUnit> fvCompatibleUnit = new FloatScalar.Rel<LengthUnit>(38000.0f, LengthUnit.MILLIMETER);
        assertFalse("Units are different", fv.getUnit().equals(fvCompatibleUnit.getUnit()));
        assertTrue("equals returns true", fv.equals(fvCompatibleUnit));
        FloatScalar.Rel<LengthUnit> fvDifferentValue = new FloatScalar.Rel<LengthUnit>(123.456f, LengthUnit.MILLIMETER);
        assertFalse("Different value makes equals return false", fv.equals(fvDifferentValue));
    }

    /**
     * Test the Math functions.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void mathFunctionsTestRelTest()
    {
        float[] seedValues = {-10f, -2f, -1f, -0.5f, -0.1f, 0f, 0.1f, 0.5f, 1f, 2f, 10f};
        for (float seedValue : seedValues)
        {
            float[] input = data(3, seedValue);
            MutableFloatVector.Rel.Sparse<LengthUnit> fv;
            try
            {
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.abs();
                MathTester.tester(input, "abs", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return Math.abs(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.acos();
                MathTester.tester(input, "acos", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.acos(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.asin();
                MathTester.tester(input, "asin", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.asin(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.atan();
                MathTester.tester(input, "atan", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.atan(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.cbrt();
                MathTester.tester(input, "cbrt", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.cbrt(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.ceil();
                MathTester.tester(input, "ceil", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.ceil(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.cos();
                MathTester.tester(input, "cos", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.cos(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.cosh();
                MathTester.tester(input, "cosh", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.cosh(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.exp();
                MathTester.tester(input, "exp", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.exp(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.expm1();
                MathTester.tester(input, "expm1", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.expm1(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.floor();
                MathTester.tester(input, "floor", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.floor(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.log();
                MathTester.tester(input, "log", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.log(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.log10();
                MathTester.tester(input, "log10", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.log10(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.log1p();
                MathTester.tester(input, "log1p", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.log1p(f);
                    }
                });
                for (int i = -10; i <= 10; i++)
                {
                    final float exponent = i * 0.5f;
                    fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                    fv.pow(exponent);
                    MathTester.tester(input, "pow(" + exponent + ")", fv, 0.001, new FloatToFloat()
                    {
                        @Override
                        public float function(final float f)
                        {
                            return (float) Math.pow(f, exponent);
                        }
                    });
                }
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.rint();
                MathTester.tester(input, "rint", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.rint(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.round();
                MathTester.tester(input, "round", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return Math.round(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.signum();
                MathTester.tester(input, "signum", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return Math.signum(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.sin();
                MathTester.tester(input, "sin", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.sin(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.sinh();
                MathTester.tester(input, "sinh", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.sinh(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.sqrt();
                MathTester.tester(input, "sqrt", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.sqrt(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.tan();
                MathTester.tester(input, "tan", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.tan(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.tanh();
                MathTester.tester(input, "tanh", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.tanh(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.toDegrees();
                MathTester.tester(input, "toDegrees", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.toDegrees(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.toRadians();
                MathTester.tester(input, "toRadians", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return (float) Math.toRadians(f);
                    }
                });
                fv = new MutableFloatVector.Rel.Sparse<LengthUnit>(input, LengthUnit.METER);
                fv.inv();
                MathTester.tester(input, "inv", fv, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float f)
                    {
                        return 1 / f;
                    }
                });
            }
            catch (ValueException ve)
            {
                fail("Caught unexpected ValueException: " + ve.toString());
            }
        }
    }

    /**
     * Test plus(FloatVectorRel.Sparse, FloatVectorRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryplusOfRelSparseAndRelDenseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Rel.Sparse<LengthUnit> left =
                    new FloatVector.Rel.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Dense<LengthUnit> right =
                    new FloatVector.Rel.Dense<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Rel.Dense<?> result = FloatVector.plus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI plus of contributing elements",
                        left.getSI(i) + right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(FloatVectorRel.Sparse, FloatVectorRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryminusOfRelSparseAndRelDenseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Rel.Sparse<LengthUnit> left =
                    new FloatVector.Rel.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Dense<LengthUnit> right =
                    new FloatVector.Rel.Dense<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Rel.Dense<?> result = FloatVector.minus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI minus of contributing elements",
                        left.getSI(i) - right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test times(FloatVectorRel.Sparse, FloatVectorRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binarytimesOfRelSparseAndRelDenseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Rel.Sparse<LengthUnit> left =
                    new FloatVector.Rel.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Dense<LengthUnit> right =
                    new FloatVector.Rel.Dense<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Rel.Sparse<?> result = FloatVector.times(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI times of contributing elements",
                        left.getSI(i) * right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test plus(FloatVectorRel.Sparse, FloatVectorRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryplusOfRelSparseAndRelSparseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Rel.Sparse<LengthUnit> left =
                    new FloatVector.Rel.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Sparse<LengthUnit> right =
                    new FloatVector.Rel.Sparse<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Rel.Sparse<?> result = FloatVector.plus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI plus of contributing elements",
                        left.getSI(i) + right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(FloatVectorRel.Sparse, FloatVectorRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryminusOfRelSparseAndRelSparseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Rel.Sparse<LengthUnit> left =
                    new FloatVector.Rel.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Sparse<LengthUnit> right =
                    new FloatVector.Rel.Sparse<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Rel.Sparse<?> result = FloatVector.minus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI minus of contributing elements",
                        left.getSI(i) - right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test times(FloatVectorRel.Sparse, FloatVectorRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binarytimesOfRelSparseAndRelSparseTest()
    {
        try
        {
            float[] leftValue = data(3, 123.4f);
            float[] rightValue = data(3, 234.5f);
            FloatVector.Rel.Sparse<LengthUnit> left =
                    new FloatVector.Rel.Sparse<LengthUnit>(leftValue, LengthUnit.MILE);
            FloatVector.Rel.Sparse<LengthUnit> right =
                    new FloatVector.Rel.Sparse<LengthUnit>(rightValue, LengthUnit.MILE);
            MutableFloatVector.Rel.Sparse<?> result = FloatVector.times(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI times of contributing elements",
                        left.getSI(i) * right.getSI(i), result.getSI(i), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test that malformed or mismatching arrays throw a ValueException.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void sizeCheckRelTest()
    {
        int junk = 0;
        try
        {
            // null array
            new FloatVector.Rel.Sparse<TemperatureUnit>((float[]) null, TemperatureUnit.DEGREE_FAHRENHEIT);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        assertTrue("The variable junk is only used to suppress annoying warnings of the code checker", junk > 0);
    }

    /**
     * Test that the times methods with a simple array as the 2nd argument.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void scaleRelTest()
    {
        try
        {
            float[] leftIn = data(3, -12.34f);
            FloatVector.Rel.Sparse<TemperatureUnit> left =
                    new FloatVector.Rel.Sparse<TemperatureUnit>(leftIn, TemperatureUnit.KELVIN);
            float[] right = data(3, -4.321f);
            MutableFloatVector.Rel.Sparse<TemperatureUnit> result = FloatVector.times(left, right);
            assertEquals("Result should be in Kelvin", TemperatureUnit.KELVIN, result.getUnit());
            for (int index = right.length; --index >= 0;)
            {
                assertEquals("Content should match product of left and right", leftIn[index] * right[index],
                        result.getSI(index), 0.001f);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /** */
    interface FloatToFloat
    {
        /**
         * @param f float; value
         * @return float value
         */
        float function(float f);
    }

    /** */
    abstract static class MathTester
    {
        /**
         * Test a math function.
         * @param inputValues float[]; unprocessed value
         * @param operation String; description of method that is being tested
         * @param actualResult FloatVector&lt;?&gt;; the actual result of the operation
         * @param precision double; expected accuracy
         * @param function FloatToFloat; encapsulated function that converts one inputValue to an outputValue
         */
        public static void tester(final float[] inputValues, final String operation, final FloatVector<?> actualResult,
                final double precision, final FloatToFloat function)
        {
            for (int i = 0; i < inputValues.length; i++)
            {
                float expectedResult = function.function(inputValues[i]);
                float got = 0;
                try
                {
                    got = actualResult.getSI(i);
                }
                catch (ValueException ve)
                {
                    fail("Caught unexpected exception: " + ve.toString());
                }
                String description =
                        String.format("%s(%f->%f should be equal to %f with precision %f", operation, inputValues[i],
                                expectedResult, got, precision);
                // System.out.println(description);
                assertEquals(description, expectedResult, got, precision);
            }
        }

    }

}
