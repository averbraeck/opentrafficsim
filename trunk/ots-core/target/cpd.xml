<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="207" tokens="478">
      <file line="495"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\MutableFloatMatrix.java"/>
      <file line="487"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\MutableFloatVector.java"/>
      <codefragment><![CDATA[        getMatrixSI().assign(f);
    }

    /** {@inheritDoc} */
    @Override
    public final void abs()
    {
        assign(FloatFunctions.abs);
    }

    /** {@inheritDoc} */
    @Override
    public final void acos()
    {
        assign(FloatFunctions.acos);
    }

    /** {@inheritDoc} */
    @Override
    public final void asin()
    {
        assign(FloatFunctions.asin);
    }

    /** {@inheritDoc} */
    @Override
    public final void atan()
    {
        assign(FloatFunctions.atan);
    }

    /** {@inheritDoc} */
    @Override
    public final void cbrt()
    {
        assign(FloatMathFunctionsImpl.cbrt);
    }

    /** {@inheritDoc} */
    @Override
    public final void ceil()
    {
        assign(FloatFunctions.ceil);
    }

    /** {@inheritDoc} */
    @Override
    public final void cos()
    {
        assign(FloatFunctions.cos);
    }

    /** {@inheritDoc} */
    @Override
    public final void cosh()
    {
        assign(FloatMathFunctionsImpl.cosh);
    }

    /** {@inheritDoc} */
    @Override
    public final void exp()
    {
        assign(FloatFunctions.exp);
    }

    /** {@inheritDoc} */
    @Override
    public final void expm1()
    {
        assign(FloatMathFunctionsImpl.expm1);
    }

    /** {@inheritDoc} */
    @Override
    public final void floor()
    {
        assign(FloatFunctions.floor);
    }

    /** {@inheritDoc} */
    @Override
    public final void log()
    {
        assign(FloatFunctions.log);
    }

    /** {@inheritDoc} */
    @Override
    public final void log10()
    {
        assign(FloatMathFunctionsImpl.log10);
    }

    /** {@inheritDoc} */
    @Override
    public final void log1p()
    {
        assign(FloatMathFunctionsImpl.log1p);
    }

    /** {@inheritDoc} */
    @Override
    public final void pow(final double x)
    {
        assign(FloatFunctions.pow((float) x));
    }

    /** {@inheritDoc} */
    @Override
    public final void rint()
    {
        assign(FloatFunctions.rint);
    }

    /** {@inheritDoc} */
    @Override
    public final void round()
    {
        assign(FloatMathFunctionsImpl.round);
    }

    /** {@inheritDoc} */
    @Override
    public final void signum()
    {
        assign(FloatMathFunctionsImpl.signum);
    }

    /** {@inheritDoc} */
    @Override
    public final void sin()
    {
        assign(FloatFunctions.sin);
    }

    /** {@inheritDoc} */
    @Override
    public final void sinh()
    {
        assign(FloatMathFunctionsImpl.sinh);
    }

    /** {@inheritDoc} */
    @Override
    public final void sqrt()
    {
        assign(FloatFunctions.sqrt);
    }

    /** {@inheritDoc} */
    @Override
    public final void tan()
    {
        assign(FloatFunctions.tan);
    }

    /** {@inheritDoc} */
    @Override
    public final void tanh()
    {
        assign(FloatMathFunctionsImpl.tanh);
    }

    /** {@inheritDoc} */
    @Override
    public final void toDegrees()
    {
        assign(FloatMathFunctionsImpl.toDegrees);
    }

    /** {@inheritDoc} */
    @Override
    public final void toRadians()
    {
        assign(FloatMathFunctionsImpl.toRadians);
    }

    /** {@inheritDoc} */
    @Override
    public final void inv()
    {
        assign(FloatFunctions.inv);
    }

    /** {@inheritDoc} */
    @Override
    public final void multiply(final float constant)
    {
        assign(FloatFunctions.mult(constant));
    }

    /** {@inheritDoc} */
    @Override
    public final void divide(final float constant)
    {
        assign(FloatFunctions.div(constant));
    }

    /**
     * Increment the values in this MutableFloatMatrix by the corresponding values in a FloatMatrix.
     * @param increment FloatMatrix&lt;U&gt;; the values by which to increment the corresponding values in this
     *            MutableFloatMatrix
     * @return MutableFloatMatrix&lt;U&gt;; this modified MutableFloatMatrix
     * @throws ValueException when the matrices do not have the same size
     */
    private MutableFloatMatrix<U> incrementValueByValue(final FloatMatrix<U> increment) throws ValueException]]></codefragment>
   </duplication>
   <duplication lines="207" tokens="475">
      <file line="497"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\MutableDoubleMatrix.java"/>
      <file line="487"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\MutableDoubleVector.java"/>
      <codefragment><![CDATA[        getMatrixSI().assign(d);
    }

    /** {@inheritDoc} */
    @Override
    public final void abs()
    {
        assign(DoubleFunctions.abs);
    }

    /** {@inheritDoc} */
    @Override
    public final void acos()
    {
        assign(DoubleFunctions.acos);
    }

    /** {@inheritDoc} */
    @Override
    public final void asin()
    {
        assign(DoubleFunctions.asin);
    }

    /** {@inheritDoc} */
    @Override
    public final void atan()
    {
        assign(DoubleFunctions.atan);
    }

    /** {@inheritDoc} */
    @Override
    public final void cbrt()
    {
        assign(DoubleMathFunctionsImpl.cbrt);
    }

    /** {@inheritDoc} */
    @Override
    public final void ceil()
    {
        assign(DoubleFunctions.ceil);
    }

    /** {@inheritDoc} */
    @Override
    public final void cos()
    {
        assign(DoubleFunctions.cos);
    }

    /** {@inheritDoc} */
    @Override
    public final void cosh()
    {
        assign(DoubleMathFunctionsImpl.cosh);
    }

    /** {@inheritDoc} */
    @Override
    public final void exp()
    {
        assign(DoubleFunctions.exp);
    }

    /** {@inheritDoc} */
    @Override
    public final void expm1()
    {
        assign(DoubleMathFunctionsImpl.expm1);
    }

    /** {@inheritDoc} */
    @Override
    public final void floor()
    {
        assign(DoubleFunctions.floor);
    }

    /** {@inheritDoc} */
    @Override
    public final void log()
    {
        assign(DoubleFunctions.log);
    }

    /** {@inheritDoc} */
    @Override
    public final void log10()
    {
        assign(DoubleMathFunctionsImpl.log10);
    }

    /** {@inheritDoc} */
    @Override
    public final void log1p()
    {
        assign(DoubleMathFunctionsImpl.log1p);
    }

    /** {@inheritDoc} */
    @Override
    public final void pow(final double x)
    {
        assign(DoubleFunctions.pow(x));
    }

    /** {@inheritDoc} */
    @Override
    public final void rint()
    {
        assign(DoubleFunctions.rint);
    }

    /** {@inheritDoc} */
    @Override
    public final void round()
    {
        assign(DoubleMathFunctionsImpl.round);
    }

    /** {@inheritDoc} */
    @Override
    public final void signum()
    {
        assign(DoubleMathFunctionsImpl.signum);
    }

    /** {@inheritDoc} */
    @Override
    public final void sin()
    {
        assign(DoubleFunctions.sin);
    }

    /** {@inheritDoc} */
    @Override
    public final void sinh()
    {
        assign(DoubleMathFunctionsImpl.sinh);
    }

    /** {@inheritDoc} */
    @Override
    public final void sqrt()
    {
        assign(DoubleFunctions.sqrt);
    }

    /** {@inheritDoc} */
    @Override
    public final void tan()
    {
        assign(DoubleFunctions.tan);
    }

    /** {@inheritDoc} */
    @Override
    public final void tanh()
    {
        assign(DoubleMathFunctionsImpl.tanh);
    }

    /** {@inheritDoc} */
    @Override
    public final void toDegrees()
    {
        assign(DoubleMathFunctionsImpl.toDegrees);
    }

    /** {@inheritDoc} */
    @Override
    public final void toRadians()
    {
        assign(DoubleMathFunctionsImpl.toRadians);
    }

    /** {@inheritDoc} */
    @Override
    public final void inv()
    {
        assign(DoubleFunctions.inv);
    }

    /** {@inheritDoc} */
    @Override
    public final void multiply(final double constant)
    {
        assign(DoubleFunctions.mult(constant));
    }

    /** {@inheritDoc} */
    @Override
    public final void divide(final double constant)
    {
        assign(DoubleFunctions.div(constant));
    }

    /**
     * Increment the values in this MutableDoubleMatrix by the corresponding values in a DoubleMatrix.
     * @param increment DoubleMatrix&lt;U&gt;; the values by which to increment the corresponding values in this
     *            MutableDoubleMatrix
     * @return MutableDoubleMatrix&lt;U&gt;; this modified MutableDoubleMatrix
     * @throws ValueException when the matrices do not have the same size
     */
    private MutableDoubleMatrix<U> incrementValueByValue(final DoubleMatrix<U> increment) throws ValueException]]></codefragment>
   </duplication>
   <duplication lines="62" tokens="168">
      <file line="336"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\graphs\FundamentalDiagram.java"/>
      <file line="449"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\graphs\TrajectoryPlot.java"/>
      <codefragment><![CDATA[        return this.sampleSets.size();
    }

    /** {@inheritDoc} */
    @Override
    public final Comparable<Integer> getSeriesKey(final int series)
    {
        return series;
    }

    /** {@inheritDoc} */
    @SuppressWarnings("rawtypes")
    @Override
    public final int indexOf(final Comparable seriesKey)
    {
        if (seriesKey instanceof Integer)
        {
            return (Integer) seriesKey;
        }
        return -1;
    }

    /** {@inheritDoc} */
    @Override
    public final void addChangeListener(final DatasetChangeListener listener)
    {
        this.listenerList.add(DatasetChangeListener.class, listener);
    }

    /** {@inheritDoc} */
    @Override
    public final void removeChangeListener(final DatasetChangeListener listener)
    {
        this.listenerList.remove(DatasetChangeListener.class, listener);
    }

    /** {@inheritDoc} */
    @Override
    public final DatasetGroup getGroup()
    {
        return this.datasetGroup;
    }

    /** {@inheritDoc} */
    @Override
    public final void setGroup(final DatasetGroup group)
    {
        this.datasetGroup = group;
    }

    /** {@inheritDoc} */
    @Override
    public final DomainOrder getDomainOrder()
    {
        return DomainOrder.ASCENDING;
    }

    /** {@inheritDoc} */
    @Override
    public final int getItemCount(final int series)
    {
        return this.sampleSets.get(series).size();]]></codefragment>
   </duplication>
   <duplication lines="57" tokens="137">
      <file line="66"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\DoubleMatrix.java"/>
      <file line="92"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\MutableDoubleMatrix.java"/>
      <codefragment><![CDATA[    public abstract static class Abs<U extends Unit<U>> extends DoubleMatrix<U> implements Absolute
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Absolute Immutable DoubleMatrix.
         * @param unit U; the unit of the new Absolute Immutable DoubleMatrix
         */
        protected Abs(final U unit)
        {
            super(unit);
            // System.out.println("Created Abs");
        }

        /**
         * @param <U> Unit
         */
        public static class Dense<U extends Unit<U>> extends Abs<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Absolute Dense Immutable DoubleMatrix.
             * @param values double[][]; the values of the entries in the new Absolute Dense Immutable DoubleMatrix
             * @param unit U; the unit of the new Absolute Dense Immutable DoubleMatrix
             * @throws ValueException when values is not rectangular
             */
            public Dense(final double[][] values, final U unit) throws ValueException
            {
                super(unit);
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * Construct a new Absolute Dense Immutable DoubleMatrix.
             * @param values DoubleScalar.Abs&lt;U&gt;[][]; the values of the entries in the new Absolute Dense
             *            Immutable DoubleMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Dense(final DoubleScalar.Abs<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values DoubleMatrix2D; the values of the entries in the new Absolute Dense Immutable DoubleMatrix
             * @param unit U; the unit of the new Absolute Dense Immutable DoubleMatrix
             */
            protected Dense(final DoubleMatrix2D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="57" tokens="137">
      <file line="231"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\DoubleMatrix.java"/>
      <file line="266"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\MutableDoubleMatrix.java"/>
      <codefragment><![CDATA[    public abstract static class Rel<U extends Unit<U>> extends DoubleMatrix<U> implements Relative
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Relative Immutable DoubleMatrix.
         * @param unit U; the unit of the new Relative Immutable DoubleMatrix
         */
        protected Rel(final U unit)
        {
            super(unit);
            // System.out.println("Created Rel");
        }

        /**
         * @param <U> Unit
         */
        public static class Dense<U extends Unit<U>> extends Rel<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Relative Dense Immutable DoubleMatrix.
             * @param values double[][]; the values of the entries in the new Relative Dense Immutable DoubleMatrix
             * @param unit U; the unit of the new Relative Dense Immutable DoubleMatrix
             * @throws ValueException when values is not rectangular
             */
            public Dense(final double[][] values, final U unit) throws ValueException
            {
                super(unit);
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * Construct a new Relative Dense Immutable DoubleMatrix.
             * @param values DoubleScalar.Rel&lt;U&gt;[][]; the values of the entries in the new Relative Dense
             *            Immutable DoubleMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Dense(final DoubleScalar.Rel<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values DoubleMatrix2D; the values of the entries in the new Relative Dense Immutable DoubleMatrix
             * @param unit U; the unit of the new Relative Dense Immutable DoubleMatrix
             */
            protected Dense(final DoubleMatrix2D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="57" tokens="137">
      <file line="66"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\FloatMatrix.java"/>
      <file line="92"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\MutableFloatMatrix.java"/>
      <codefragment><![CDATA[    public abstract static class Abs<U extends Unit<U>> extends FloatMatrix<U> implements Absolute
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Absolute Immutable FloatMatrix.
         * @param unit U; the unit of the new Absolute Immutable FloatMatrix
         */
        protected Abs(final U unit)
        {
            super(unit);
            // System.out.println("Created Abs");
        }

        /**
         * @param <U> Unit
         */
        public static class Dense<U extends Unit<U>> extends Abs<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Absolute Dense Immutable FloatMatrix.
             * @param values float[][]; the values of the entries in the new Absolute Dense Immutable FloatMatrix
             * @param unit U; the unit of the new Absolute Dense Immutable FloatMatrix
             * @throws ValueException when values is not rectangular
             */
            public Dense(final float[][] values, final U unit) throws ValueException
            {
                super(unit);
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * Construct a new Absolute Dense Immutable FloatMatrix.
             * @param values FloatScalar.Abs&lt;U&gt;[][]; the values of the entries in the new Absolute Dense Immutable
             *            FloatMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Dense(final FloatScalar.Abs<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values FloatMatrix2D; the values of the entries in the new Absolute Dense Immutable FloatMatrix
             * @param unit U; the unit of the new Absolute Dense Immutable FloatMatrix
             */
            protected Dense(final FloatMatrix2D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="57" tokens="137">
      <file line="231"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\FloatMatrix.java"/>
      <file line="265"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\MutableFloatMatrix.java"/>
      <codefragment><![CDATA[    public abstract static class Rel<U extends Unit<U>> extends FloatMatrix<U> implements Relative
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Relative Immutable FloatMatrix.
         * @param unit U; the unit of the new Relative Immutable FloatMatrix
         */
        protected Rel(final U unit)
        {
            super(unit);
            // System.out.println("Created Rel");
        }

        /**
         * @param <U> Unit
         */
        public static class Dense<U extends Unit<U>> extends Rel<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Relative Dense Immutable FloatMatrix.
             * @param values float[][]; the values of the entries in the new Relative Dense Immutable FloatMatrix
             * @param unit U; the unit of the new Relative Dense Immutable FloatMatrix
             * @throws ValueException when values is not rectangular
             */
            public Dense(final float[][] values, final U unit) throws ValueException
            {
                super(unit);
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * Construct a new Relative Dense Immutable FloatMatrix.
             * @param values FloatScalar.Rel&lt;U&gt;[][]; the values of the entries in the new Relative Dense Immutable
             *            FloatMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Dense(final FloatScalar.Rel<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values FloatMatrix2D; the values of the entries in the new Relative Dense Immutable FloatMatrix
             * @param unit U; the unit of the new Relative Dense Immutable FloatMatrix
             */
            protected Dense(final FloatMatrix2D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="56" tokens="128">
      <file line="58"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\DoubleVector.java"/>
      <file line="89"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\MutableDoubleVector.java"/>
      <codefragment><![CDATA[    public abstract static class Abs<U extends Unit<U>> extends DoubleVector<U> implements Absolute
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Absolute Immutable DoubleVector.
         * @param unit U; the unit of the new Absolute Immutable DoubleVector
         */
        protected Abs(final U unit)
        {
            super(unit);
            // System.out.println("Created Abs");
        }

        /**
         * @param <U> Unit
         */
        public static class Dense<U extends Unit<U>> extends Abs<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Absolute Dense Immutable DoubleVector.
             * @param values double[]; the values of the entries in the new Absolute Dense Immutable DoubleVector
             * @param unit U; the unit of the new Absolute Dense Immutable DoubleVector
             */
            public Dense(final double[] values, final U unit)
            {
                super(unit);
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * Construct a new Absolute Dense Immutable DoubleVector.
             * @param values DoubleScalar.Abs&lt;U&gt;[]; the values of the entries in the new Absolute Dense Immutable
             *            DoubleVector
             * @throws ValueException when values has zero entries
             */
            public Dense(final DoubleScalar.Abs<U>[] values) throws ValueException
            {
                super(checkNonEmpty(values)[0].getUnit());
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values DoubleMatrix1D; the values of the entries in the new Absolute Dense Immutable DoubleVector
             * @param unit U; the unit of the new Absolute Dense Immutable DoubleVector
             */
            protected Dense(final DoubleMatrix1D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="56" tokens="128">
      <file line="221"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\DoubleVector.java"/>
      <file line="260"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\MutableDoubleVector.java"/>
      <codefragment><![CDATA[    public abstract static class Rel<U extends Unit<U>> extends DoubleVector<U> implements Relative
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Relative Immutable DoubleVector.
         * @param unit U; the unit of the new Relative Immutable DoubleVector
         */
        protected Rel(final U unit)
        {
            super(unit);
            // System.out.println("Created Rel");
        }

        /**
         * @param <U> Unit
         */
        public static class Dense<U extends Unit<U>> extends Rel<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Relative Dense Immutable DoubleVector.
             * @param values double[]; the values of the entries in the new Relative Dense Immutable DoubleVector
             * @param unit U; the unit of the new Relative Dense Immutable DoubleVector
             */
            public Dense(final double[] values, final U unit)
            {
                super(unit);
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * Construct a new Relative Dense Immutable DoubleVector.
             * @param values DoubleScalar.Rel&lt;U&gt;[]; the values of the entries in the new Relative Dense Immutable
             *            DoubleVector
             * @throws ValueException when values has zero entries
             */
            public Dense(final DoubleScalar.Rel<U>[] values) throws ValueException
            {
                super(checkNonEmpty(values)[0].getUnit());
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values DoubleMatrix1D; the values of the entries in the new Relative Dense Immutable DoubleVector
             * @param unit U; the unit of the new Relative Dense Immutable DoubleVector
             */
            protected Dense(final DoubleMatrix1D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="56" tokens="128">
      <file line="58"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\FloatVector.java"/>
      <file line="89"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\MutableFloatVector.java"/>
      <codefragment><![CDATA[    public abstract static class Abs<U extends Unit<U>> extends FloatVector<U> implements Absolute
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Absolute Immutable FloatVector.
         * @param unit U; the unit of the new Absolute Immutable FloatVector
         */
        protected Abs(final U unit)
        {
            super(unit);
            // System.out.println("Created Abs");
        }

        /**
         * @param <U> Unit
         */
        public static class Dense<U extends Unit<U>> extends Abs<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Absolute Dense Immutable FloatVector.
             * @param values float[]; the values of the entries in the new Absolute Dense Immutable FloatVector
             * @param unit U; the unit of the new Absolute Dense Immutable FloatVector
             */
            public Dense(final float[] values, final U unit)
            {
                super(unit);
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * Construct a new Absolute Dense Immutable FloatVector.
             * @param values FloatScalar.Abs&lt;U&gt;[]; the values of the entries in the new Absolute Dense Immutable
             *            FloatVector
             * @throws ValueException when values has zero entries
             */
            public Dense(final FloatScalar.Abs<U>[] values) throws ValueException
            {
                super(checkNonEmpty(values)[0].getUnit());
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values FloatMatrix1D; the values of the entries in the new Absolute Dense Immutable FloatVector
             * @param unit U; the unit of the new Absolute Dense Immutable FloatVector
             */
            protected Dense(final FloatMatrix1D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="56" tokens="128">
      <file line="221"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\FloatVector.java"/>
      <file line="260"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\MutableFloatVector.java"/>
      <codefragment><![CDATA[    public abstract static class Rel<U extends Unit<U>> extends FloatVector<U> implements Relative
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Relative Immutable FloatVector.
         * @param unit U; the unit of the new Relative Immutable FloatVector
         */
        protected Rel(final U unit)
        {
            super(unit);
            // System.out.println("Created Rel");
        }

        /**
         * @param <U> Unit
         */
        public static class Dense<U extends Unit<U>> extends Rel<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Relative Dense Immutable FloatVector.
             * @param values float[]; the values of the entries in the new Relative Dense Immutable FloatVector
             * @param unit U; the unit of the new Relative Dense Immutable FloatVector
             */
            public Dense(final float[] values, final U unit)
            {
                super(unit);
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * Construct a new Relative Dense Immutable FloatVector.
             * @param values FloatScalar.Rel&lt;U&gt;[]; the values of the entries in the new Relative Dense Immutable
             *            FloatVector
             * @throws ValueException when values has zero entries
             */
            public Dense(final FloatScalar.Rel<U>[] values) throws ValueException
            {
                super(checkNonEmpty(values)[0].getUnit());
                // System.out.println("Created Dense");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values FloatMatrix1D; the values of the entries in the new Relative Dense Immutable FloatVector
             * @param unit U; the unit of the new Relative Dense Immutable FloatVector
             */
            protected Dense(final FloatMatrix1D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="49" tokens="124">
      <file line="42"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\scalar\DoubleScalar.java"/>
      <file line="41"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\scalar\MutableDoubleScalar.java"/>
      <codefragment><![CDATA[    public static class Abs<U extends Unit<U>> extends DoubleScalar<U> implements Absolute, Comparable<Abs<U>>
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Absolute Immutable DoubleScalar.
         * @param value double; the value of the new Absolute Immutable DoubleScalar
         * @param unit U; the unit of the new Absolute Immutable DoubleScalar
         */
        public Abs(final double value, final U unit)
        {
            super(unit);
            // System.out.println("Created Abs");
            initialize(value);
        }

        /**
         * Construct a new Absolute Immutable DoubleScalar from an existing Absolute Immutable DoubleScalar.
         * @param value DoubleScalar.Abs&lt;U&gt;; the reference
         */
        public Abs(final DoubleScalar.Abs<U> value)
        {
            super(value.getUnit());
            // System.out.println("Created Abs");
            initialize(value);
        }

        /**
         * Construct a new Absolute Immutable DoubleScalar from an existing Absolute MutableDoubleScalar.
         * @param value  MutableDoubleScalar.Abs&lt;U&gt;; the reference
         */
        public Abs(final  MutableDoubleScalar.Abs<U> value)
        {
            super(value.getUnit());
            // System.out.println("Created Abs");
            initialize(value);
        }

        /** {@inheritDoc} */
        @Override
        public final MutableDoubleScalar.Abs<U> mutable()
        {
            return new MutableDoubleScalar.Abs<U>(this);
        }

        /** {@inheritDoc} */
        @Override
        public final int compareTo(final Abs<U> o)]]></codefragment>
   </duplication>
   <duplication lines="49" tokens="124">
      <file line="107"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\scalar\DoubleScalar.java"/>
      <file line="113"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\scalar\MutableDoubleScalar.java"/>
      <codefragment><![CDATA[    public static class Rel<U extends Unit<U>> extends DoubleScalar<U> implements Relative, Comparable<Rel<U>>
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Relative Immutable DoubleScalar.
         * @param value double; the value of the new Relative Immutable DoubleScalar
         * @param unit U; the unit of the new Relative Immutable DoubleScalar
         */
        public Rel(final double value, final U unit)
        {
            super(unit);
            // System.out.println("Created Rel");
            initialize(value);
        }

        /**
         * Construct a new Relative Immutable DoubleScalar from an existing Relative Immutable DoubleScalar.
         * @param value DoubleScalar.Rel&lt;U&gt;; the reference
         */
        public Rel(final DoubleScalar.Rel<U> value)
        {
            super(value.getUnit());
            // System.out.println("Created Rel");
            initialize(value);
        }

        /**
         * Construct a new Relative Immutable DoubleScalar from an existing Relative MutableDoubleScalar.
         * @param value  MutableDoubleScalar.Rel&lt;U&gt;; the reference
         */
        public Rel(final  MutableDoubleScalar.Rel<U> value)
        {
            super(value.getUnit());
            // System.out.println("Created Rel");
            initialize(value);
        }

        /** {@inheritDoc} */
        @Override
        public final MutableDoubleScalar.Rel<U> mutable()
        {
            return new MutableDoubleScalar.Rel<U>(this);
        }

        /** {@inheritDoc} */
        @Override
        public final int compareTo(final Rel<U> o)]]></codefragment>
   </duplication>
   <duplication lines="49" tokens="124">
      <file line="42"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\scalar\FloatScalar.java"/>
      <file line="41"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\scalar\MutableFloatScalar.java"/>
      <codefragment><![CDATA[    public static class Abs<U extends Unit<U>> extends FloatScalar<U> implements Absolute, Comparable<Abs<U>>
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Absolute Immutable FloatScalar.
         * @param value float; the value of the new Absolute Immutable FloatScalar
         * @param unit U; the unit of the new Absolute Immutable FloatScalar
         */
        public Abs(final float value, final U unit)
        {
            super(unit);
            // System.out.println("Created Abs");
            initialize(value);
        }

        /**
         * Construct a new Absolute Immutable FloatScalar from an existing Absolute Immutable FloatScalar.
         * @param value FloatScalar.Abs&lt;U&gt;; the reference
         */
        public Abs(final FloatScalar.Abs<U> value)
        {
            super(value.getUnit());
            // System.out.println("Created Abs");
            initialize(value);
        }

        /**
         * Construct a new Absolute Immutable FloatScalar from an existing Absolute MutableFloatScalar.
         * @param value  MutableFloatScalar.Abs&lt;U&gt;; the reference
         */
        public Abs(final  MutableFloatScalar.Abs<U> value)
        {
            super(value.getUnit());
            // System.out.println("Created Abs");
            initialize(value);
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatScalar.Abs<U> mutable()
        {
            return new MutableFloatScalar.Abs<U>(this);
        }

        /** {@inheritDoc} */
        @Override
        public final int compareTo(final Abs<U> o)]]></codefragment>
   </duplication>
   <duplication lines="49" tokens="124">
      <file line="107"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\scalar\FloatScalar.java"/>
      <file line="113"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\scalar\MutableFloatScalar.java"/>
      <codefragment><![CDATA[    public static class Rel<U extends Unit<U>> extends FloatScalar<U> implements Relative, Comparable<Rel<U>>
    {
        /**  */
        private static final long serialVersionUID = 20141006L;

        /**
         * Construct a new Relative Immutable FloatScalar.
         * @param value float; the value of the new Relative Immutable FloatScalar
         * @param unit U; the unit of the new Relative Immutable FloatScalar
         */
        public Rel(final float value, final U unit)
        {
            super(unit);
            // System.out.println("Created Rel");
            initialize(value);
        }

        /**
         * Construct a new Relative Immutable FloatScalar from an existing Relative Immutable FloatScalar.
         * @param value FloatScalar.Rel&lt;U&gt;; the reference
         */
        public Rel(final FloatScalar.Rel<U> value)
        {
            super(value.getUnit());
            // System.out.println("Created Rel");
            initialize(value);
        }

        /**
         * Construct a new Relative Immutable FloatScalar from an existing Relative MutableFloatScalar.
         * @param value  MutableFloatScalar.Rel&lt;U&gt;; the reference
         */
        public Rel(final  MutableFloatScalar.Rel<U> value)
        {
            super(value.getUnit());
            // System.out.println("Created Rel");
            initialize(value);
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatScalar.Rel<U> mutable()
        {
            return new MutableFloatScalar.Rel<U>(this);
        }

        /** {@inheritDoc} */
        @Override
        public final int compareTo(final Rel<U> o)]]></codefragment>
   </duplication>
   <duplication lines="33" tokens="119">
      <file line="723"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\DoubleMatrix.java"/>
      <file line="723"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\FloatMatrix.java"/>
      <codefragment><![CDATA[            throw new ValueException("Cannot determine unit for DoubleMatrix from an empty array of DoubleScalar");
        }
        for (int row = values.length; --row >= 1;)
        {
            if (values[0].length != values[row].length)
            {
                throw new ValueException("Lengths of rows are not all the same");
            }
        }
    }

    /**
     * Check that provided row and column indices are valid.
     * @param row int; the row value to check
     * @param column int; the column value to check
     * @throws ValueException when row or column is invalid
     */
    protected final void checkIndex(final int row, final int column) throws ValueException
    {
        if (row < 0 || row >= rows() || column < 0 || column >= columns())
        {
            throw new ValueException("index out of range (valid range is 0.." + (rows() - 1) + ", 0.."
                    + (columns() - 1) + ", got " + row + ", " + column + ")");
        }
    }

    /**
     * Retrieve a value in matrixSI without checking validity of the indices.
     * @param row int; the row where the value must be retrieved
     * @param column int; the column where the value must be retrieved
     * @return double; the value stored at the indicated row and column
     */
    protected final double safeGet(final int row, final int column)]]></codefragment>
   </duplication>
   <duplication lines="46" tokens="113">
      <file line="146"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\DoubleMatrix.java"/>
      <file line="176"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\MutableDoubleMatrix.java"/>
      <codefragment><![CDATA[            }

        }

        /**
         * @param <U> Unit
         */
        public static class Sparse<U extends Unit<U>> extends Abs<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Absolute Sparse Immutable DoubleMatrix.
             * @param values double[][]; the values of the entries in the new Absolute Sparse Immutable DoubleMatrix
             * @param unit U; the unit of the new Absolute Sparse Immutable DoubleMatrix
             * @throws ValueException when values is not rectangular
             */
            public Sparse(final double[][] values, final U unit) throws ValueException
            {
                super(unit);
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * Construct a new Absolute Sparse Immutable DoubleMatrix.
             * @param values DoubleScalar.Abs&lt;U&gt;[][]; the values of the entries in the new Absolute Sparse
             *            Immutable DoubleMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Sparse(final DoubleScalar.Abs<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values DoubleMatrix2D; the values of the entries in the new Absolute Sparse Immutable DoubleMatrix
             * @param unit U; the unit of the new Absolute Sparse Immutable DoubleMatrix
             */
            protected Sparse(final DoubleMatrix2D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="46" tokens="113">
      <file line="311"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\DoubleMatrix.java"/>
      <file line="350"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\MutableDoubleMatrix.java"/>
      <codefragment><![CDATA[            }

        }

        /**
         * @param <U> Unit
         */
        public static class Sparse<U extends Unit<U>> extends Rel<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Relative Sparse Immutable DoubleMatrix.
             * @param values double[][]; the values of the entries in the new Relative Sparse Immutable DoubleMatrix
             * @param unit U; the unit of the new Relative Sparse Immutable DoubleMatrix
             * @throws ValueException when values is not rectangular
             */
            public Sparse(final double[][] values, final U unit) throws ValueException
            {
                super(unit);
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * Construct a new Relative Sparse Immutable DoubleMatrix.
             * @param values DoubleScalar.Rel&lt;U&gt;[][]; the values of the entries in the new Relative Sparse
             *            Immutable DoubleMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Sparse(final DoubleScalar.Rel<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values DoubleMatrix2D; the values of the entries in the new Relative Sparse Immutable DoubleMatrix
             * @param unit U; the unit of the new Relative Sparse Immutable DoubleMatrix
             */
            protected Sparse(final DoubleMatrix2D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="46" tokens="113">
      <file line="146"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\FloatMatrix.java"/>
      <file line="176"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\MutableFloatMatrix.java"/>
      <codefragment><![CDATA[            }

        }

        /**
         * @param <U> Unit
         */
        public static class Sparse<U extends Unit<U>> extends Abs<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Absolute Sparse Immutable FloatMatrix.
             * @param values float[][]; the values of the entries in the new Absolute Sparse Immutable FloatMatrix
             * @param unit U; the unit of the new Absolute Sparse Immutable FloatMatrix
             * @throws ValueException when values is not rectangular
             */
            public Sparse(final float[][] values, final U unit) throws ValueException
            {
                super(unit);
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * Construct a new Absolute Sparse Immutable FloatMatrix.
             * @param values FloatScalar.Abs&lt;U&gt;[][]; the values of the entries in the new Absolute Sparse
             *            Immutable FloatMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Sparse(final FloatScalar.Abs<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values FloatMatrix2D; the values of the entries in the new Absolute Sparse Immutable FloatMatrix
             * @param unit U; the unit of the new Absolute Sparse Immutable FloatMatrix
             */
            protected Sparse(final FloatMatrix2D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="46" tokens="113">
      <file line="311"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\FloatMatrix.java"/>
      <file line="349"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\MutableFloatMatrix.java"/>
      <codefragment><![CDATA[            }

        }

        /**
         * @param <U> Unit
         */
        public static class Sparse<U extends Unit<U>> extends Rel<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Relative Sparse Immutable FloatMatrix.
             * @param values float[][]; the values of the entries in the new Relative Sparse Immutable FloatMatrix
             * @param unit U; the unit of the new Relative Sparse Immutable FloatMatrix
             * @throws ValueException when values is not rectangular
             */
            public Sparse(final float[][] values, final U unit) throws ValueException
            {
                super(unit);
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * Construct a new Relative Sparse Immutable FloatMatrix.
             * @param values FloatScalar.Rel&lt;U&gt;[][]; the values of the entries in the new Relative Sparse
             *            Immutable FloatMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Sparse(final FloatScalar.Rel<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values FloatMatrix2D; the values of the entries in the new Relative Sparse Immutable FloatMatrix
             * @param unit U; the unit of the new Relative Sparse Immutable FloatMatrix
             */
            protected Sparse(final FloatMatrix2D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="44" tokens="110">
      <file line="134"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\unit\ElectricalPotentialUnit.java"/>
      <file line="116"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\unit\ElectricalResistanceUnit.java"/>
      <codefragment><![CDATA[            final ElectricalPotentialUnit referenceUnit, final double conversionFactorToReferenceUnit)
    {
        super(nameKey, abbreviationKey, unitSystem, referenceUnit, conversionFactorToReferenceUnit, true);
        this.massUnit = referenceUnit.getMassUnit();
        this.lengthUnit = referenceUnit.getLengthUnit();
        this.electricalCurrentUnit = referenceUnit.getElectricalCurrentUnit();
        this.timeUnit = referenceUnit.getTimeUnit();
    }

    /**
     * @return massUnit
     */
    public final MassUnit getMassUnit()
    {
        return this.massUnit;
    }

    /**
     * @return lengthUnit
     */
    public final LengthUnit getLengthUnit()
    {
        return this.lengthUnit;
    }

    /**
     * @return electricalCurrentUnit
     */
    public final ElectricalCurrentUnit getElectricalCurrentUnit()
    {
        return this.electricalCurrentUnit;
    }

    /**
     * @return timeUnit
     */
    public final TimeUnit getTimeUnit()
    {
        return this.timeUnit;
    }

    /** {@inheritDoc} */
    @Override
    public final ElectricalPotentialUnit getStandardUnit()]]></codefragment>
   </duplication>
   <duplication lines="15" tokens="104">
      <file line="423"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\matrix\DoubleMatrix.java"/>
      <file line="423"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\matrix\FloatMatrix.java"/>
      <codefragment><![CDATA[    protected final void initialize(final double[][] values) throws ValueException
    {
        ensureRectangular(values);
        this.matrixSI = createMatrix2D(values.length, 0 == values.length ? 0 : values[0].length);
        if (getUnit().equals(getUnit().getStandardUnit()))
        {
            this.matrixSI.assign(values);
        }
        else
        {
            for (int row = values.length; --row >= 0;)
            {
                for (int column = values[row].length; --column >= 0;)
                {
                    safeSet(row, column, expressAsSIUnit(values[row][column]));]]></codefragment>
   </duplication>
   <duplication lines="45" tokens="104">
      <file line="137"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\DoubleVector.java"/>
      <file line="172"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\MutableDoubleVector.java"/>
      <codefragment><![CDATA[            }

        }

        /**
         * @param <U> Unit
         */
        public static class Sparse<U extends Unit<U>> extends Abs<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Absolute Sparse Immutable DoubleVector.
             * @param values double[]; the values of the entries in the new Absolute Sparse Immutable DoubleVector
             * @param unit U; the unit of the new Absolute Sparse Immutable DoubleVector
             */
            public Sparse(final double[] values, final U unit)
            {
                super(unit);
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * Construct a new Absolute Sparse Immutable DoubleVector.
             * @param values DoubleScalar.Abs&lt;U&gt;[]; the values of the entries in the new Absolute Sparse Immutable
             *            DoubleVector
             * @throws ValueException when values has zero entries
             */
            public Sparse(final DoubleScalar.Abs<U>[] values) throws ValueException
            {
                super(checkNonEmpty(values)[0].getUnit());
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values DoubleMatrix1D; the values of the entries in the new Absolute Sparse Immutable DoubleVector
             * @param unit U; the unit of the new Absolute Sparse Immutable DoubleVector
             */
            protected Sparse(final DoubleMatrix1D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="45" tokens="104">
      <file line="300"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\DoubleVector.java"/>
      <file line="343"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vdouble\vector\MutableDoubleVector.java"/>
      <codefragment><![CDATA[            }

        }

        /**
         * @param <U> Unit
         */
        public static class Sparse<U extends Unit<U>> extends Rel<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Relative Sparse Immutable DoubleVector.
             * @param values double[]; the values of the entries in the new Relative Sparse Immutable DoubleVector
             * @param unit U; the unit of the new Relative Sparse Immutable DoubleVector
             */
            public Sparse(final double[] values, final U unit)
            {
                super(unit);
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * Construct a new Relative Sparse Immutable DoubleVector.
             * @param values DoubleScalar.Rel&lt;U&gt;[]; the values of the entries in the new Relative Sparse Immutable
             *            DoubleVector
             * @throws ValueException when values has zero entries
             */
            public Sparse(final DoubleScalar.Rel<U>[] values) throws ValueException
            {
                super(checkNonEmpty(values)[0].getUnit());
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values DoubleMatrix1D; the values of the entries in the new Relative Sparse Immutable DoubleVector
             * @param unit U; the unit of the new Relative Sparse Immutable DoubleVector
             */
            protected Sparse(final DoubleMatrix1D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="45" tokens="104">
      <file line="137"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\FloatVector.java"/>
      <file line="172"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\MutableFloatVector.java"/>
      <codefragment><![CDATA[            }

        }

        /**
         * @param <U> Unit
         */
        public static class Sparse<U extends Unit<U>> extends Abs<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Absolute Sparse Immutable FloatVector.
             * @param values float[]; the values of the entries in the new Absolute Sparse Immutable FloatVector
             * @param unit U; the unit of the new Absolute Sparse Immutable FloatVector
             */
            public Sparse(final float[] values, final U unit)
            {
                super(unit);
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * Construct a new Absolute Sparse Immutable FloatVector.
             * @param values FloatScalar.Abs&lt;U&gt;[]; the values of the entries in the new Absolute Sparse Immutable
             *            FloatVector
             * @throws ValueException when values has zero entries
             */
            public Sparse(final FloatScalar.Abs<U>[] values) throws ValueException
            {
                super(checkNonEmpty(values)[0].getUnit());
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values FloatMatrix1D; the values of the entries in the new Absolute Sparse Immutable FloatVector
             * @param unit U; the unit of the new Absolute Sparse Immutable FloatVector
             */
            protected Sparse(final FloatMatrix1D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="45" tokens="104">
      <file line="300"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\FloatVector.java"/>
      <file line="343"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\vfloat\vector\MutableFloatVector.java"/>
      <codefragment><![CDATA[            }

        }

        /**
         * @param <U> Unit
         */
        public static class Sparse<U extends Unit<U>> extends Rel<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20141006L;

            /**
             * Construct a new Relative Sparse Immutable FloatVector.
             * @param values float[]; the values of the entries in the new Relative Sparse Immutable FloatVector
             * @param unit U; the unit of the new Relative Sparse Immutable FloatVector
             */
            public Sparse(final float[] values, final U unit)
            {
                super(unit);
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * Construct a new Relative Sparse Immutable FloatVector.
             * @param values FloatScalar.Rel&lt;U&gt;[]; the values of the entries in the new Relative Sparse Immutable
             *            FloatVector
             * @throws ValueException when values has zero entries
             */
            public Sparse(final FloatScalar.Rel<U>[] values) throws ValueException
            {
                super(checkNonEmpty(values)[0].getUnit());
                // System.out.println("Created Sparse");
                initialize(values);
            }

            /**
             * For package internal use only.
             * @param values FloatMatrix1D; the values of the entries in the new Relative Sparse Immutable FloatVector
             * @param unit U; the unit of the new Relative Sparse Immutable FloatVector
             */
            protected Sparse(final FloatMatrix1D values, final U unit)
            {
                super(unit);]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="102">
      <file line="224"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\unit\SICoefficients.java"/>
      <file line="259"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\unit\SICoefficients.java"/>
      <codefragment><![CDATA[    public static SICoefficients multiply(final SICoefficients a, final SICoefficients b)
    {
        EnumMap<SI, Integer> coefficients = new EnumMap<SI, Integer>(SI.class);
        for (SI si : a.getCoefficientsMap().keySet())
        {
            coefficients.put(si, a.getCoefficientsMap().get(si));
        }

        for (SI si : b.getCoefficientsMap().keySet())
        {
            if (coefficients.containsKey(si))
            {
                coefficients.put(si, coefficients.get(si) + b.getCoefficientsMap().get(si));]]></codefragment>
   </duplication>
   <duplication lines="44" tokens="101">
      <file line="33"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\AbstractValue.java"/>
      <file line="32"
            path="D:\Java\ots-core\src\main\java\org\opentrafficsim\core\value\Scalar.java"/>
      <codefragment><![CDATA[    protected AbstractValue(final U unit)
    {
        this.unit = unit;
    }

    /** {@inheritDoc} */
    @Override
    public final U getUnit()
    {
        return this.unit;
    }

    /** {@inheritDoc} */
    @Override
    public final double expressAsSIUnit(final double value)
    {
        return ValueUtil.expressAsSIUnit(value, this.unit);
    }

    /**
     * Convert a value in SI standard unit into the unit of this AbstractValue.
     * @param value double; the value in the standard SI unit
     * @return double; the value in the unit as specified for this AbstractValue
     */
    protected final double expressAsSpecifiedUnit(final double value)
    {
        return ValueUtil.expressAsUnit(value, this.unit);
    }

    /** {@inheritDoc} */
    @Override
    public final boolean isAbsolute()
    {
        return this instanceof Absolute;
    }

    /** {@inheritDoc} */
    @Override
    public final boolean isRelative()
    {
        return this instanceof Relative;
    }

}]]></codefragment>
   </duplication>
</pmd-cpd>