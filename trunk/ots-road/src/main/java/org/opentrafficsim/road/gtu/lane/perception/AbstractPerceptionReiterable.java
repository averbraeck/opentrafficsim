package org.opentrafficsim.road.gtu.lane.perception;

import java.util.Iterator;
import java.util.NoSuchElementException;

import org.opentrafficsim.road.gtu.lane.perception.headway.Headway;

/**
 * This class uses a single primary iterator which a subclass defines, and makes sure that all elements are only looked up and
 * create once. It does so by storing the elements in a linked list. All calls to {@code iterator()} return an iterator which 
 * iterates over the linked list. If an iterator runs to the end of the linked list, the primary iterator is requested to add an
 * element if it has one. 
 * <p>
 * Copyright (c) 2013-2017 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights reserved. <br>
 * BSD-style license. See <a href="http://opentrafficsim.org/node/13">OpenTrafficSim License</a>.
 * <p>
 * @version $Revision$, $LastChangedDate$, by $Author$, initial version 20 feb. 2018 <br>
 * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>
 * @author <a href="http://www.tudelft.nl/pknoppers">Peter Knoppers</a>
 * @author <a href="http://www.transport.citg.tudelft.nl">Wouter Schakel</a>
 * @param <H> headway type
 */
public abstract class AbstractPerceptionReiterable<H extends Headway> implements PerceptionIterable<H>
{

    /** First entry. */
    IteratorEntry first;

    /** Last entry generated by the primary iterator. */
    IteratorEntry last;

    /** Primary iterator. */
    private Iterator<H> primaryIterator;

    /**
     * Returns the primary iterator, possibly obtained from the subclass.
     * @return Iterator; primary iterator
     */
    Iterator<H> getPrimaryIterator()
    {
        if (this.primaryIterator == null)
        {
            this.primaryIterator = primaryIterator();
        }
        return this.primaryIterator;
    }

    /**
     * Returns the primary iterator. This method is called once by AbstractPerceptionReiterable.
     * @return Iterator; primary iterator
     */
    protected abstract Iterator<H> primaryIterator();

    /** {@inheritDoc} */
    @Override
    public final H first()
    {
        if (this.first == null)
        {
            if (getPrimaryIterator().hasNext())
            {
                addNextHeadway(getPrimaryIterator().next());
            }
            else
            {
                return null;
            }
        }
        return this.first.value;
    }

    /** {@inheritDoc} */
    @Override
    public final boolean isEmpty()
    {
        return first() == null;
    }

    /** {@inheritDoc} */
    @Override
    public final Iterator<H> iterator()
    {
        return new PerceptionIterator();
    }

    /**
     * Adds an iterator entry to the internal linked list.
     * @param next
     */
    void addNextHeadway(final H next)
    {
        IteratorEntry entry = new IteratorEntry(next);
        if (AbstractPerceptionReiterable.this.last == null)
        {
            AbstractPerceptionReiterable.this.first = entry;
            AbstractPerceptionReiterable.this.last = entry;
        }
        else
        {
            AbstractPerceptionReiterable.this.last.next = entry;
            AbstractPerceptionReiterable.this.last = entry;
        }
    }

    /**
     * This iterator is returned to callers of the {@code iterator()} method. Multiple instances may be returned which use the
     * same linked list of {@code IteratorEntry}. Whenever an iterator runs to the end of this list, the primary iterator is
     * requested to find the next object, if it has a next object.
     * <p>
     * Copyright (c) 2013-2017 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights reserved.
     * <br>
     * BSD-style license. See <a href="http://opentrafficsim.org/node/13">OpenTrafficSim License</a>.
     * <p>
     * @version $Revision$, $LastChangedDate$, by $Author$, initial version 16 feb. 2018 <br>
     * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>
     * @author <a href="http://www.tudelft.nl/pknoppers">Peter Knoppers</a>
     * @author <a href="http://www.transport.citg.tudelft.nl">Wouter Schakel</a>
     */
    public class PerceptionIterator implements Iterator<H>
    {

        /** Last returned entry. */
        IteratorEntry lastReturned;

        /** Next entry. */
        IteratorEntry next;

        /** Constructor. */
        PerceptionIterator()
        {
            this.next = AbstractPerceptionReiterable.this.first;
        }

        /** {@inheritDoc} */
        @Override
        public boolean hasNext()
        {
            assureNext();
            return this.next != null;
        }

        /** {@inheritDoc} */
        @Override
        public H next()
        {
            assureNext();
            if (this.next == null)
            {
                throw new NoSuchElementException();
            }
            this.lastReturned = this.next;
            this.next = this.lastReturned.next;
            return this.lastReturned.value;
        }

        /**
         * Assures that a next entry is available, if the primary iterator has a next value.
         */
        private void assureNext()
        {
            if (this.next == null && getPrimaryIterator().hasNext())
            {
                addNextHeadway(getPrimaryIterator().next());
                if (this.lastReturned == null)
                {
                    this.next = AbstractPerceptionReiterable.this.first;
                }
                else
                {
                    this.next = this.lastReturned.next;
                }
            }
        }

    }

    /**
     * Entries that make up a linked list of values.
     * <p>
     * Copyright (c) 2013-2017 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights reserved.
     * <br>
     * BSD-style license. See <a href="http://opentrafficsim.org/node/13">OpenTrafficSim License</a>.
     * <p>
     * @version $Revision$, $LastChangedDate$, by $Author$, initial version 16 feb. 2018 <br>
     * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>
     * @author <a href="http://www.tudelft.nl/pknoppers">Peter Knoppers</a>
     * @author <a href="http://www.transport.citg.tudelft.nl">Wouter Schakel</a>
     */
    private class IteratorEntry
    {
        /** Value. */
        final H value;

        /** Next entry. */
        IteratorEntry next;

        /**
         * Constructor.
         * @param value T; value
         */
        public IteratorEntry(final H value)
        {
            this.value = value;
        }
    }

}
